# This program is part of the Revised Mathematisch Centrum Algol 68 Test Set
  by Dick Grune [1979].
 
  This program is distributed with Algol 68 Genie with
  kind permission of Dick Grune.
 
  The complete test set is an open-access publication, 
  self-archived by Dick Grune and available from:
     www.dickgrune.com/CS/Algol68
  or from the Vrije Universiteit Amsterdam:
     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #
 
#numr10#
BEGIN #Test ln#
      
      #N.B. This test should not be considered as certification of 'ln',
               but only as an indication that 'ln' has the right properties#
      PROC warn = (STRING s) VOID:
           BEGIN print ((newline, newline, "++++test error: ", s, newline))
           END;
      
      REAL minreal = 2 / (smallreal * maxreal * smallreal);
      
      # must be close to the smallest real value > 0 ;
              this will probably work on most machines with normalized reals #
      REAL e = exp (1);
      
      REAL y1,  #exp(x)# y2,  #exp(-x)# y3,  #exp(1/x)# y4;
      
      #exp(-1/x)# REAL z1,  #ln(y1)# z2,  #ln(y2)# z3,  #ln(y3)# z4;
      
      #ln(y4)# REAL max1 := 0, sum1 := 0, sumsq1 := 0,
      INT c1 := 0,
      REAL at1;
      
      PROC test1 = (REAL x, y, z) VOID:
           #ln(exp(x))=x#
           IF y > 0.0
           THEN REAL d = ABS ((x - z) / x) / smallreal;
                
                sum1 +:= d;
                sumsq1 +:= d * d;
                c1 +:= 1;
                (max1 < d | max1 := d; at1 := x)
           FI;
      
      REAL max2 := 0, sum2 := 0, sumsq2 := 0,
      INT c2 := 0,
      REAL at2;
      
      PROC test2 = (REAL x, y) VOID:
           #ln(e*x)=1+ln(x)#
           IF x < maxreal / 3
           THEN REAL z = ln (e * x);
                
                REAL z1 = y + 1;
                
                REAL d = ABS ((z - z1) / z) / smallreal;
                
                sum2 +:= d;
                sumsq2 +:= d * d;
                c2 +:= 1;
                (max2 < d | max2 := d; at2 := x)
           FI;
      
      REAL max3 := 0, sum3 := 0, sumsq3 := 0,
      INT c3 := 0,
      REAL at3;
      
      PROC test3 = (REAL x, y) VOID:
           #2*ln(sqrt(x))=ln(x)#
           IF REAL z = ln (sqrt (x));
              
              REAL z1 = z + z;
              
              REAL d = ABS ((y - z1) / y) / smallreal;
              
              sum3 +:= d;
              sumsq3 +:= d * d;
              c3 +:= 1;
              max3 < d
           THEN max3 := d;
                at3 := x
           FI;
      
      REAL max4 := 0, sum4 := 0, sumsq4 := 0,
      INT c4 := 0,
      REAL at4;
      
      PROC test4 = (REAL x, y, z) VOID:
           #ln(1/x)=-ln(x)#
           IF REAL z1 = ABS y + ABS z;
              
              z1 /= 0
           THEN REAL d = ABS (2 * (y + z) / z1) / smallreal;
                
                sum4 +:= d;
                sumsq4 +:= d * d;
                c4 +:= 1;
                (max4 < d | max4 := d; at4 := x)
           FI;
      
      PROC test5 = (REAL x, y) VOID:
           #x>0, 1-1/x <= ln(x) <= x-1#
           IF y < 1.0 - 1.0 / x
           THEN print ((newline, newline, "x=", x, newline, "ln(x) = ", y, newline, "1-1/x = ", 1 - 1 / x));
                warn ("ln(x) should not be less than 1-1/x")
           ELIF y > x - 1
           THEN print ((newline, newline, "x=", x, newline, "ln(x) = ", y, newline, "x-1   =", x - 1));
                warn ("ln(x) should not exceed x-1")
           FI;
      
      REAL x := 1;
      
      WHILE x +:= random;
            REAL x2 = -x, x3 = 1 / x;
            
            REAL x4 = -x3;
            
            y1 := exp (x);
            y2 := exp (x2);
            y3 := exp (x3);
            y4 := exp (x4);
            z1 := ln (y1);
            z2 := ln (y2);
            z3 := ln (y3);
            z4 := ln (y4);
            test1 (x, y1, z1);
            test1 (x2, y2, z2);
            test1 (x3, y3, z3);
            test1 (x4, y4, z4);
            test2 (y1, z1);
            test2 (y2, z2);
            test2 (y3, z3);
            test2 (y4, z4);
            test3 (y1, z1);
            test3 (y2, z2);
            test3 (y3, z3);
            test3 (y4, z4);
            test4 (y1, z1, z2);
            test4 (y3, z3, z4);
            test5 (y1, z1);
            test5 (y2, z2);
            test5 (y3, z3);
            test5 (y4, z4);
            y1 < maxreal / 3 AND y2 > 3 * minreal
      DO SKIP
      OD;
      PROC p = (STRING s, REAL sum, sumsq, n, max, at) VOID:
           BEGIN print ((newline, newline, s));
                 print ((newline, "Maximum relative error = smallreal*"));
                 print (fixed (max, -(realwidth % 2 + 2), realwidth % 2));
                 print ((newline, "Occurred at x = ", at));
                 print ((newline, "Average relative error = smallreal*"));
                 print (fixed (sum / n, -(realwidth % 2 + 2), realwidth % 2));
                 print ((newline, "R.M.S. relative error  = smallreal*"));
                 print (fixed (sqrt (sumsq / n), -(realwidth % 2 + 2), realwidth % 2))
           END;
      
      p ("Checks on ln(exp(x))=x", sum1, sumsq1, c1, max1, at1);
      p ("Checks on ln(e*x)=1+ln(x)", sum2, sumsq2, c2, max2, at2);
      p ("Checks on 2*ln(sqrt(x))=ln(x)", sum3, sumsq3, c3, max3, at3);
      p ("Checks on ln(1/x)=-ln(x)", sum4, sumsq4, c4, max4, at4);
      print (newline);
      print ((newline, "log 1     = 0"));
      print ((newline, "ln(1)     = "));
      print (fixed (ln (1), -(realwidth + 1), realwidth - 1));
      print ((newline, "log 2     = 0.6931471805599453094172321214581765680755+ (Knuth)"));
      print ((newline, "ln(2)     = "));
      print (fixed (ln (2), -(realwidth + 1), realwidth - 1));
      print ((newline, "log 3     = 1.0986122886681096913952452369225257046475- (Knuth)"));
      print ((newline, "ln(3)     = "));
      print (fixed (ln (3), -(realwidth + 1), realwidth - 1));
      print ((newline, "log 10    = 2.3025850929940456840179914546843642076011+ (Knuth)"));
      print ((newline, "ln(10)    = "));
      print (fixed (ln (10), -(realwidth + 1), realwidth - 1));
      print ((newline, "-loglog 2 = 0.3665129205816643270124391582326694694543- (Knuth)"));
      print ((newline, "-ln(ln(2))= "));
      print (fixed (-ln (ln (2)), -(realwidth + 1), realwidth - 1));
      print ((newline, "smallreal = "));
      print (fixed (small real, -2 * realwidth, 2 * (realwidth - 1)));
      print ((newline, "          = ", small real, newline))
END