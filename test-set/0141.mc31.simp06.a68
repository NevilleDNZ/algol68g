COMMENT

This program is part of the Algol 68 Genie test.

The test set contains programs from the 
   "Revised Mathematisch Centrum Algol 68 Test Set" [1979] 
and synthetic programs from the 
   "Rennes test set" [1975].
These test sets are available from:
   www.dickgrune.com/CS/Algol68
or from the Vrije Universiteit Amsterdam:
   ftp://ftp.cs.vu.nl/pub/dick/Algol68

Above two test sets were used in the 1980's to validate the ALGOL68RS compilers [Algol Bulletin 49.2]. 

The "Rennes test-set" programs are automatically generated from the Algol 68 grammar using a formalism from Bernard Houssais (Universite de Rennes).  Especially the "Rennes test set" has proven very effective in exposing problems in Algol 68 implementations.  All programs are converted to upper-stropping and reformatted for lay-out.

The "Revised Mathematisch Centrum test set" programs are not synthetic like those in the "Rennes test set", but are selected programmer-made applications that are distributed with Algol 68 Genie with kind permission of the author of this test set, Dick Grune.

Note that part of the programs in this test set will fail; most due to intentional (syntactic or runtime) errors and a few due to differences between Algol 68 Genie and revised Algol 68. 

COMMENT

PR regression PR

#simp06#
bits bytes strings and other noise:
BEGIN   #Don't just stand there, do something!#
          print (("The following are some of the environment enquiries"
                   ,newline));
          print((
              "integer", int lengths, max int, newline,
              "real   ", real lengths, max real, small real, newline,
              "bits   ", bits lengths, bits width, newline,
              "bytes  ", bytes lengths, bytes width, newline,
              "null character  """, nullcharacter, """",
                                        ABSnull character,
              newline, newline));
          #bits#
          BITS a:= BIN 63 #i.e., 6 ones in a row#;
          BITS b:= BIN 1;
          print (#Let's add them and see what happens#
              ("Addition of two BITS quantities", newline,
               ABS a, ABS b, newline, "Answer should be: "));
          STRING s:= IF bits width > 6 THEN "64" ELSE "0" FI;
          BITS c:= BIN (ABS a + ABS b);
          print ((s, newline, "Answer is",ABS c, newline, newline));
          IF  2r111111 = BIN  63
               THEN SKIP
               ELSE print ("Error in BIN things") FI;
          # reduced bytes test #
          #bytes are fixed-length strings#
          BYTES s1:= bytes pack("ab");
          [1: bytes width]CHAR cs; #to contain what the
                                                     answer should be#
          cs[1:byteswidth]:= s1; s:= "ab";
          FOR i TO bytes width
          DO IF IF i<= UPB s THEN s[i]
                                    ELSE null character FI /= cs[i]
              THEN
                print(("Bytes fault, values are: ",i, cs, STRING(s1)))
              ELSE
                print(("Character", i, " okay", newline))
              FI
          OD;
          print(newline);
          # Print all character values 
          print("All character values, in lines of 64 ");
          FOR i FROM 0 TO max abs char
          DO
              IF i MOD 64 = 0
             THEN print((newline,
                             whole(i, -4), "-", whole(i+63, -4), " "))
              FI;
              print(REPR i)
          OD
          #
END
