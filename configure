#! /bin/sh
#
# This file is part of Algol 68 Genie - an Algol 68 interpreter.
# Copyright (C) 2001-2006 J. Marcel van der Veer <algol68g@xs4all.nl>.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# configure: configuring script for Algol 68 Genie.
#

A68G_NAME="a68g"
MAKEFILE=makefile
VERSION_NUMBER="9.2"
REVISION="Mark $VERSION_NUMBER"
TIME_STAMP="July 2006"
RELEASE_DATE="released $TIME_STAMP"
PACKAGE="algol68g-mk$VERSION_NUMBER"
# Where does the system store things
SYS_INC=/usr/include
SYS_LIB=/usr/lib
SYS_BIN=/usr/bin
USR_LOC=/usr/local
LOC_INC=$USR_LOC/include
USR_CHK="./regression-mk$VERSION_NUMBER"
USR_DOC="./doc"
USR_DOC_TEMPLATES="$USR_DOC/templates"
USR_SRC="./source"
SQL_DIR=$USR_LOC/pgsql
BUILD_FILE="$USR_SRC/$MAKEFILE"
VERSION_FILE="$USR_SRC/version.h"
TEST_FILE="$USR_CHK/regression"
BATCH_FILE="$USR_CHK/regression.bat"
LINK_COLOUR="blue"
BACKGROUND_COLOUR="#e8e8e8"
echo "$A68G_NAME $REVISION $RELEASE_DATE ($PACKAGE) `uname -mrs`"
#
USERID=`whoami`
POWERPC=`uname -a | grep powerpc`
PPC=`uname -a | grep ppc`
X86=`uname -a | grep [3456]86`
BSD=`uname -s | grep BSD`
#
# Option processing
#
prev_arg=
build=no
warn="-w"
threads=no
opt=
ld_opt=
indent_opt=no
doc_opt=no
anonymus=no
for arg in "$@"
do
# Handle option = value
	if [    -n "$prev_arg"  ]
	then
		eval "$prev_arg=\$arg"
		ac_prev=
		continue
	fi
# Process accepted formats
	case "$arg"
	in
		-*=*)
			val_arg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
		*)      
			val_arg= ;;
	esac
# Process current option
	case "$arg"
	in
	-anonymus | --anonymus)
		anonymus=;;
	-b | --build)
		build=yes ;;
	-cc | --cc)
		prev_arg=cc ;;
	-cc=* | --cc=*)
		cc=$val_arg ;;
	-debug | --debug)
		opt=`echo $opt "-ggdb"`
		ld_opt=`echo $ld_opt "-ggdb"` ;;
	-docs | --docs)
		doc_opt=;;
	-indent | --indent)
		indent_opt=;;
	-profile | --profile)
		opt=`echo $opt "-pg"`
		ld_opt=`echo $ld_opt "-pg"` ;;
	-incdir | --incdir)
		prev_arg=USR_INC ;;
	-incdir=* | --incdir=*)
		USR_INC=$val_arg ;;
	-libdir | --libdir)
		prev_arg=USR_LIB ;;
	-libdir=* | --libdir=*)
		USR_LIB=$val_arg ;;
	-bindir | --bindir)
		prev_arg=USR_BIN ;;
	-bindir=* | --bindir=*)
		USR_BIN=$val_arg ;;
	-mandir | --mandir)
		prev_arg=man_dir ;;
	-mandir=* | --mandir=*)
		man_dir=$val_arg ;;
	-O0)
		opt=`echo $opt "-O0"` ;;
	-O)
		opt=`echo $opt "-O"` ;;
	-O2)
		opt=`echo $opt "-O2"` ;;
	-O3)
		opt=`echo $opt "-O3 -funroll-loops"` ;;
	-O4)
		opt=`echo $opt "-O3 -funroll-loops -march=prescott -mno-align-double"` ;;
	-threads | --threads)
		threads=;;
	-version | --version | -v | --v)
		echo "$PACKAGE"
		exit ;;
	-warn)
		warn="-W -Wall" ;;
	-help | --help | -? | ?)
		echo "usage: $0 [options]"
		cat << \_HELP
--incdir[=]DIR  	set include-directory for compilation to DIR
--libdir[=]DIR  	set library-directory for compilation to DIR
--bindir[=]DIR  	set target directory for executable to DIR
--mandir[=]DIR  	set target directory for manual page to DIR

--threads       	use POSIX threads enabling the parallel clause

--cc[=]CC       	set C compiler to CC
-debug  		set debugging mode
-profile                set profiling mode
-O0     		set optimisation level for compilation to -O0
-O      		set optimisation level for compilation to -O
-O2     		set optimisation level for compilation to -O2
-O3     		set optimisation level for compilation to -O3

--build 		build target after configuring
--docs			build documentation (development release only)
--help  		print help and exit
--version       	print version and exit
--warn			give warning messages during compilation
_HELP
		exit 1 ;;
	*)
		echo "exiting: no such option: $arg"
		exit 1 ;;
	esac
done
# Check whether options emptied
if [    -n "$prev_arg" ]
then
	echo "exiting: missing argument to $prev_arg"
	exit 1
fi
#
# Generate documentation
#
if [	-z $doc_opt	]
then
	cd $USR_DOC_TEMPLATES
	for f in `echo *.html`
	do
		echo $f
#		sed "/<!-- Navigation bar -->/r navigation" < $f | sed "s/REVISION/$REVISION/g" - | sed "s/TIME_STAMP/$TIME_STAMP/g" - | sed "s/PACKAGE/$PACKAGE/g" - | sed "s/LINK_COLOUR/$LINK_COLOUR/g" - | sed "s/BACKGROUND_COLOUR/$BACKGROUND_COLOUR/g" - > ../$f
		sed "/<!-- Navigation bar -->/r navigation" < $f | sed "s/REVISION/$REVISION/g" | sed "s/TIME_STAMP/$TIME_STAMP/g" | sed "s/PACKAGE/$PACKAGE/g" | sed "s/LINK_COLOUR/$LINK_COLOUR/g" | sed "s/BACKGROUND_COLOUR/$BACKGROUND_COLOUR/g" > ../$f
	done
	echo "generated documentation"
	echo "$0 done"
	exit
fi
#
# Indent source
#
if [	-z $indent_opt	]
then
	cd $USR_SRC
	for f in `echo *.c`
	do
		echo $f
		gindent $f -l500 -br -ce -cdw -nfca -npsl -nut -i2 -nbad -cs -pcs
		rm $f~
	done
	wc *.c *.h
	echo "indented source"
	echo "$0 done"
	exit
fi
#
# Anonymus version header file
#
if [	-z $anonymus	]
then
	echo "/* $VERSION_FILE generated on `date` by $USERID. */" 1>$VERSION_FILE
	echo "#define A68G_NAME \"$A68G_NAME\"" 1>>$VERSION_FILE
	echo "#define REVISION \"$REVISION\"" 1>>$VERSION_FILE
	echo "#define RELEASE_DATE \"$RELEASE_DATE\"" 1>>$VERSION_FILE
	echo "#define USERID \"unknown\"" 1>>$VERSION_FILE
	echo "#define GCC_VERSION \"unknown\"" 1>>$VERSION_FILE
	echo "#define A68_LIBPLOT_VERSION \"unknown\"" 1>>$VERSION_FILE
	echo "#define A68_GSL_VERSION \"unknown\"" 1>>$VERSION_FILE
	echo "#define A68_PG_VERSION \"unknown\"" 1>>$VERSION_FILE
	echo "generated anonymus version header"
	echo "$0 done"
	exit
fi
#
# Can we write to the current dir?
#
if ! [  -w "`pwd`"	]
then
	echo "exiting: $USERID cannot write to `pwd`"
	exit 1
fi
#
# Find a C compiler, first gcc and than cc; otherwise fail
#
if [    -z $cc  ]
then
	echo -n "checking C compiler in $SYS_BIN: "
	if [    -f $SYS_BIN/gcc ]
	then
		cc=gcc
	elif [  -f $SYS_BIN/cc  ]
	then
		cc=cc
	else
		echo "exiting: cannot find a C compiler"
		rm -f $MAKEFILE
		exit 1
	fi
	echo "found $cc"
fi
#
# Find default directories
#
# Find default USR_INC if none was given
if [    -z $USR_INC     ]
then
	echo -n "include directory: "
	if [    -d $USR_LOC/include   ]
	then
		USR_INC=$USR_LOC/include
	else
		USR_INC=$SYS_INC
	fi
	echo $USR_INC
fi
# Find default USR_LIB if none was given
if [    -z $USR_LIB     ]
then
	echo -n "library directory: "
	if [    -d $USR_LOC/lib       ]
	then
		USR_LIB=$USR_LOC/lib
	else
		USR_LIB=$SYS_LIB
	fi
	echo $USR_LIB
fi
# Find default USR_BIN if none was given
if [    -z $USR_BIN     ]
then
	echo -n "target binary directory: "
	if [    -d $USR_LOC/bin       ]
	then
		USR_BIN=$USR_LOC/bin
	elif [  -d /usr/share/bin       ]
	then
		USR_BIN=/usr/share/bin
	elif [  -w $SYS_BIN     ]
	then
		USR_BIN=$SYS_BIN
	elif [ 	-d ~/bin	]
	then
		USR_BIN=~/bin
	else
		USR_BIN=`pwd`
	fi
	echo $USR_BIN
elif ! [	-d $USR_BIN     ]
then
	echo "exiting: $USR_BIN is not a valid directory"
	exit 1
fi
if ! [  -w $USR_BIN     ]
then
	echo "$USERID cannot write to $USR_BIN, set to `pwd`"
	USR_BIN=`pwd`
fi
# Find default man_dir if none was given
if [    -z $man_dir     ]
then
	echo -n "target man directory: "
	if [    -d $USR_LOC/man/man1       ]
	then
		man_dir="$USR_LOC/man/man1"
	elif [  -d /usr/share/man/man1       ]
	then
		man_dir="/usr/share/man/man1"
	elif [  -w /usr/man/man1     ]
	then
		man_dir="/usr/man/man1"
	elif [	-d ~/man	]
	then
		man_dir="~/man"
	else
		man_dir=`pwd`
	fi
	echo $man_dir
elif ! [	-d $man_dir     ]
then
	echo "exiting: $man_dir is not a valid directory"
	exit 1
fi
if ! [  -w $man_dir     ]
then
	echo "$USERID cannot write to $man_dir, set to `pwd`"
	man_dir=`pwd`
fi
#
# Are the necessary includes all there?
#
err=no
for inc in assert.h ctype.h errno.h fcntl.h limits.h math.h setjmp.h signal.h stdio.h stdlib.h string.h sys/resource.h sys/stat.h sys/time.h sys/times.h sys/types.h sys/wait.h time.h unistd.h
do
	if ! [  -f $SYS_INC/$inc	]
	then
		echo -n "$inc: "
		echo "not found"
		err=yes
	fi
done
if [    $err = yes      ]
then
	echo "exiting: not all include files found"
	exit 1
fi
#
# Generate top level makefile
#
echo "# $MAKEFILE generated on `date` by $USERID." 1>$MAKEFILE
echo "SHELL=/bin/sh" 1>>$MAKEFILE
echo "PACKAGE_NAME=$PACKAGE" 1>>$MAKEFILE
echo "USR_BIN=$USR_BIN" 1>>$MAKEFILE
echo "USR_SRC=./source" 1>>$MAKEFILE
echo "USR_CHK=$USR_CHK" 1>>$MAKEFILE
echo "man_dir=$man_dir" 1>>$MAKEFILE
cat >>$MAKEFILE <<\_MAKE_EOF
all a68g::
	@cd $(USR_SRC); $(MAKE) CPP_FLAGS="$(CPP_FLAGS)" CFLAGS="$(CFLAGS)" LD_FLAGS="$(LD_FLAGS)"; mv a68g ..; cd ..
install:	all
	@install -m 755 -s a68g $(USR_BIN)
	@install -m 644 doc/man1/a68g.1 $(man_dir)
uninstall:
	@rm -f $(USR_BIN)/a68g $(man_dir)/a68g.1
depend:
	@cd $(USR_SRC); $(MAKE) depend; cd ..
regression:  all
	@cd $(USR_CHK); ./regression $(DIR); cd ..
clean:
	@cd $(USR_SRC); $(MAKE) clean; cd ..
	@for f in `echo core`; do rm -f $$f; done
distclean mostlyclean maintainer-clean: clean
	@for f in `echo makefile`; do rm -f $$f; done
	@rm -f a68g .a68g.log .a68g.tmp .a68g.x .a68g.x.l
	./configure -anonymus
dist:   distclean
	@cd ..;tar -czf $(PACKAGE_NAME).tar.gz $(PACKAGE_NAME)
TAGS info dvi:
	@echo "target not implemented"
_MAKE_EOF
echo "generated $MAKEFILE"
#
# Generate source level makefile
#
echo "# $BUILD_FILE generated on `date` by $USERID." 1>$BUILD_FILE
echo "SHELL=/bin/sh" 1>>$BUILD_FILE
echo "USR_BIN=$USR_BIN" 1>>$BUILD_FILE
echo "USR_LIB=$USR_LIB" 1>>$BUILD_FILE
echo "USR_INC=$USR_INC" 1>>$BUILD_FILE
echo "CC=$cc" 1>>$BUILD_FILE
#
# Shared libraries are called .so (Linux etcetera) or .dylib (BSD).
#
# Find POSIX threads
#if [    -z $threads -a -f $SYS_INC/pthread.h ]
if [    -z $threads ]
then
	echo -n "checking POSIX threads in $SYS_LIB and $SYS_INC: "
	if [ -f $SYS_INC/pthread.h ]
	then
		if [ -f $SYS_LIB/libpthread.so -o -f $SYS_LIB/libpthread.a -o -f $SYS_LIB/libpthread.dylib ]
		then
			echo "found"
			echo "POSIX_THREADS_LIBS=-lpthread" 1>>$BUILD_FILE
			echo "POSIX_THREADS_FLAG=-DHAVE_POSIX_THREADS" 1>>$BUILD_FILE
		else
			echo "not found"
		fi
	else
		echo "not found"
	fi
else
	echo "not using POSIX threads; parallel clause will be disabled (specify --threads)"
fi
# Find GNU Plotutils
echo -n "checking GNU plotutils in $USR_LIB and $USR_INC: "
if [    -f $USR_INC/plot.h ]
then
	if [    -f $USR_LIB/libplot.so -o -f $USR_LIB/libplot.a	-o -f $USR_LIB/libplot.dylib	]
	then
		echo "found"
		echo "PLOTUTILS_LIBS=-L/usr/X11R6/lib -lXaw -lXmu -lXt -lSM -lICE -lXext -lX11 -lplot" 1>>$BUILD_FILE
		echo "PLOTUTILS_FLAG=-DHAVE_PLOTUTILS" 1>>$BUILD_FILE
	else
		echo "not found"
	fi
else
	echo "not found"
fi
# Find GSL
echo -n "checking GNU scientific library in $USR_LIB: "
if [    -f $USR_LIB/libgsl.so -o -f $USR_LIB/libgsl.a -o -f $USR_LIB/libgsl.dylib 	]
then
	if [    -f $USR_LIB/libgslcblas.so -o -f $USR_LIB/libgslcblas.a -o -f $USR_LIB/libgslcblas.dylib	]
	then
		echo "found"
		echo "GSL_LIBS=-lgsl -lgslcblas" 1>>$BUILD_FILE
		echo "GSL_FLAG=-DHAVE_GSL" 1>>$BUILD_FILE
	else
		echo "not found"
	fi
else
	echo "not found"
fi
# Find curses
echo -n "checking curses in $SYS_LIB: "
if [    -f $SYS_LIB/libcurses.so -o -f $SYS_LIB/libcurses.a -o -f $SYS_LIB/libcurses.dylib ]
then
	echo "found"
	echo "CURSES_LIBS=-lcurses" 1>>$BUILD_FILE
	echo "CURSES_FLAG=-DHAVE_CURSES" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find terminfo 
echo -n "checking terminfo in $SYS_INC and $SYS_LIB: "
if [    -f $SYS_INC/term.h	]
then
	if [    -f $SYS_LIB/libcurses.so -o -f $SYS_LIB/libcurses.a -o -f $SYS_LIB/libcurses.dylib ]
	then
		echo "found"
		echo "TERMINFO_FLAG=-DHAVE_TERMINFO" 1>>$BUILD_FILE
	else
		echo "not found"
	fi
else
	echo "not found"
fi
# Find HTTP support
echo -n "checking HTTP support in $SYS_INC: "
if [    -f $SYS_INC/netdb.h -a -f $SYS_INC/arpa/inet.h -a -f $SYS_INC/netinet/in.h -a -f $SYS_INC/sys/socket.h	]
then
	echo "found"
	echo "HTTP_FLAG=-DHAVE_HTTP" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find regular expression support
echo -n "checking regular expression support in $SYS_INC: "
if [    -f $SYS_INC/regex.h	]
then
	echo "found"
	echo "REGEX_FLAG=-DHAVE_REGEX" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find PostgreSQL libraries
echo -n "checking PostgreSQL libraries in $SYS_LIB, $USR_LIB and $SQL_DIR: "
if [ -f $SQL_DIR/lib/libpq.so -o -f $SQL_DIR/lib/libpq.a -o -f $SQL_DIR/lib/libpq.dylib	]
then
	echo "found"
	echo "SQL_DIR=$SQL_DIR">>$BUILD_FILE
	echo "SQL_LIBS=-lpq" 1>>$BUILD_FILE
	echo "SQL_FLAG=-DHAVE_POSTGRESQL" 1>>$BUILD_FILE
elif [ -f $SYS_DIR/lib/libpq.so -o -f $SYS_DIR/lib/libpq.a -o -f $SYS_DIR/lib/libpq.dylib	]
then
	echo "found"
	echo "SQL_DIR=$SYS_DIR">>$BUILD_FILE
	echo "SQL_LIBS=-lpq" 1>>$BUILD_FILE
	echo "SQL_FLAG=-DHAVE_POSTGRESQL" 1>>$BUILD_FILE
elif [ -f $USR_DIR/lib/libpq.so -o -f $USR_DIR/lib/libpq.a -o -f $USR_DIR/lib/libpq.dylib	]
then
	echo "found"
	echo "SQL_DIR=$USR_DIR">>$BUILD_FILE
	echo "SQL_LIBS=-lpq" 1>>$BUILD_FILE
	echo "SQL_FLAG=-DHAVE_POSTGRESQL" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find IEEE-754 compatibility
echo -n "checking IEEE 754 floating point compatibility using system information: "
if [	-n POWERPC -o -n PPC -o -n X86	]
then
	echo "compatible"
	echo "IEEE_754_FLAG=-DHAVE_IEEE_754" 1>>$BUILD_FILE
else
	echo "unknown"
	echo -n "checking IEEE 754 floating point support in $SYS_INC: "
	if [    -f $SYS_INC/ieee754.h -o -f $SYS_INC/ieeefp.h -o -f $SYS_INC/machine/ieeefp.h   ]
	then
		echo "found"
		echo "IEEE_754_FLAG=-DHAVE_IEEE_754" 1>>$BUILD_FILE
	else
		echo "not found: if your platform is IEEE 754 compatible then build with 'make CFLAGS=HAVE_IEEE_754'"
	fi
fi
# Finish Makefile
echo -n "STD_CFLAGS=" 1>>$BUILD_FILE
if [	-d /opt/local/include	]
then
	echo -n "-I/opt/local/include " 1>>$BUILD_FILE
fi
if [    $cc = gcc       ]
then
        if ! [	-d $SQL_DIR	]
        then
		echo "-I\$(USR_INC) $warn $opt" 1>>$BUILD_FILE
	else
		echo "-I\$(USR_INC) -I$USR_LOC/pgsql/include $warn $opt" 1>>$BUILD_FILE
	fi
else
	echo "-I\$(USR_INC)" 1>>$BUILD_FILE
fi
echo -n "STD_LD_FLAGS=" 1>>$BUILD_FILE
if [	-d /opt/local/lib	]
then
	echo -n "-L/opt/local/lib " 1>>$BUILD_FILE
fi
if [    $cc = gcc       ]
then
        if ! [	-d $SQL_DIR	]
        then
		echo "-L\$(USR_LIB) $ld_opt" 1>>$BUILD_FILE
	else
		echo "-L\$(USR_LIB) -L\$(SQL_DIR)/lib $ld_opt" 1>>$BUILD_FILE
	fi
else
	echo "-L\$(USR_LIB)" 1>>$BUILD_FILE
fi
# Sources
echo "HS=`echo $USR_SRC/*.h | sort | sed 's/\.\/[a-zA-Z0-9]*\///g'`" 1>>$BUILD_FILE
echo "CS=`echo $USR_SRC/*.c | sort | sed 's/\.\/[a-zA-Z0-9]*\///g' | sed 's/\.c/\.o/g'`" 1>>$BUILD_FILE

cat >>$BUILD_FILE <<\_BUILD_EOF
FLAGS=$(CPPFLAGS) $(STD_CFLAGS) $(POSIX_THREADS_FLAG) $(PLOTUTILS_FLAG) $(GSL_FLAG) $(CURSES_FLAG) $(IEEE_754_FLAG) $(HTTP_FLAG) $(REGEX_FLAG) $(TERMINFO_FLAG) $(SQL_FLAG) $(CFLAGS)
all:    a68g
a68g:   $(CS)
	@echo "building a68g ..."
	@$(CC) $(CS) $(CFLAGS) $(STD_LD_FLAGS) $(POSIX_THREADS_LIBS) $(PLOTUTILS_LIBS) $(GSL_LIBS) $(CURSES_LIBS) $(SQL_LIBS) -lm $(LD_FLAGS) -o a68g
$(CS): $(HS)
.c.o:
	@echo "compiling $< ..."
	@$(CC) -c $(FLAGS) $<
clean:
	@rm -f $(CS)
depend:
	@touch $(HS)
_BUILD_EOF
echo "generated $BUILD_FILE"
#
# Make regression script
#
if [    -d $USR_CHK -a -w $USR_CHK      ]
then
	cat >$TEST_FILE <<\_REGRESSION_EOF
#! /bin/sh
if [	-n $1 ]
then
	cd ./$1
fi
if [    -f './a68g' ]
then
	A68='./a68g'
elif [  -f '../a68g' ]
then
	A68='../a68g'
else
	A68='a68g'
fi
#
uname -mrs
pwd
echo "number of test programs: `find . -name "*.a68" -print | wc -l`"
date
$A68 -version
case $?
in
	0) ;;
	*) echo "where is $A68?"; exit $? ;;
esac
#
date
for f in `find . -name "*.a68" -print | grep -v quote-stropping | sort`
do
	echo "$f" 1>&2
	echo "$f"
	$A68 --regression $f
done
for f in `find . -name "*.a68" -print | grep quote-stropping | sort`
do
	echo "$f" 1>&2
	echo "$f"
	$A68 --regression --quotestrop $f
done
date
ls -l
rm *.tmp .a68g.tmp
_REGRESSION_EOF
	cat >$BATCH_FILE <<\_BATCH_EOF
#! /bin/sh
if [	-n $1 ]
then
	cd ./$1
fi
#
A68=a68g
#
for f in `find . -name "*.a68" -print | grep -v quote-stropping | sort`
do
	echo "$A68 --regression $f"
done
for f in `find . -name "*.a68" -print | grep quote-stropping | sort`
do
	echo "$A68 --regression --quotestrop $f"
done
_BATCH_EOF
chmod +x $TEST_FILE
chmod +x $BATCH_FILE
echo "generated $TEST_FILE"
echo "generated $BATCH_FILE"
fi
#
# Generate a version header
#
echo "/* $VERSION_FILE generated on `date` by $USERID. */" 1>$VERSION_FILE
echo "#define A68G_NAME \"$A68G_NAME\"" 1>>$VERSION_FILE
echo "#define REVISION \"$REVISION\"" 1>>$VERSION_FILE
echo "#define RELEASE_DATE \"$RELEASE_DATE\"" 1>>$VERSION_FILE
echo "#define USERID \"$USERID\"" 1>>$VERSION_FILE
if [    $cc = gcc       ]
then
	echo "#define GCC_VERSION \"`gcc -dumpversion | sed '2,$d'`\"" 1>>$VERSION_FILE
fi
if [ -f $USR_INC/plot.h ]
then
	echo "#define A68_LIBPLOT_VERSION \"`grep '#define PL_LIBPLOT_VER_STRING ' $USR_INC/plot.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
elif [ -f $LOC_INC/plot.h ]
then
	echo "#define A68_LIBPLOT_VERSION \"`grep '#define PL_LIBPLOT_VER_STRING ' $LOC_INC/plot.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
fi
if [ -f $USR_INC/gsl/gsl_version.h ]
then
	echo "#define A68_GSL_VERSION \"`grep '#define GSL_VERSION ' $USR_INC/gsl/gsl_version.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
elif [ -f $LOC_INC/gsl/gsl_version.h ]
then
	echo "#define A68_GSL_VERSION \"`grep '#define GSL_VERSION ' $LOC_INC/gsl/gsl_version.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
fi
if [ -f $USR_INC/pgsql/include/pg_config.h ]
then
	echo "#define A68_PG_VERSION \"`grep '#define PG_VERSION ' $USR_INC/pgsql/pg_config.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
elif [ -f $USR_LOC/pgsql/include/pg_config.h ]
then
	echo "#define A68_PG_VERSION \"`grep '#define PG_VERSION ' $USR_LOC/pgsql/include/pg_config.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$VERSION_FILE
fi
#
# Build target if required
#
if [    $build = yes    ]
then
	echo "building $PACKAGE"
	make a68g
	case $?
	in
		0)
			;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
	echo -n "checking whether $PACKAGE works: "
	./a68g -version >& /dev/null
	case $?
	in
		0)
			echo "ok" ;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
fi
echo "$0 done"
exit
