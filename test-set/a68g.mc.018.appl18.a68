# This program is part of the
 
     Revised Mathematisch Centrum Algol 68 Test Set

  by Dick Grune [1979].

  This program is distributed with Algol 68 Genie with
  kind permission of Dick Grune.

  This test set is available from:

     http://www.dickgrune.com/CS/Algol68

  or from the Vrije Universiteit Amsterdam:

     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #

  PR quiet PR

#appl18#
# Happy family, taken from: C.H. Lindsey and S.G. van der Meulen,
                 "Informal Introduction to ALGOL 68", Revised edition #
BEGIN
COMMENT This  example  concerns  people: COMMENT
    MODE PERSON = STRUCT
            (STRING surname, given # name #,
            REF PERSON father, mother, wife # or husband #,
            FLEX [1:0] REF PERSON children,
            BOOL dead, male);
    BOOL male = TRUE, female = FALSE, alive = FALSE,
        dead = TRUE;
    REF PERSON nobody = NIL;
COMMENT Sometimes it will be convenient to have a PERSON's given name
and surname together: COMMENT
    PROC names =
        (REF PERSON pers) STRUCT(STRING given, surname):
        (given OF pers, surname OF pers);
COMMENT All our formal-parameters will be of mode REF PERSON
rather than PERSON, to save making unnecessary copies of PERSON's
(which are rather large) at run time. COMMENT
COMMENT Here is a procedure that will be used to add a little random
spice to the messages that we shall produce. It yields a random integer
in the range specified by its parameter. COMMENT
    PROC randint = (INT range) INT:
        1 + ENTIER (random*range);
    read(last random); # to start it off #
COMMENT This program is going to print texts of variable length. We
therefore have to take a newline whenever a line is full (after 80
characters, say), but before doing this we must go back to the last
space and transfer the whole of the word which was about to be split
onto the next line.  Therefore, we shall output into a []CHAR instead
of directly to the book. COMMENT
    FILE file; [1:80] CHAR buffer;
    FOR i TO UPB buffer DO buffer[i]:= " " OD;
    associate(file, buffer);
COMMENT Whenever the buffer becomes full, its contents (except for the
split word) must be printed in the real book. COMMENT
    PROC empty buffer = (REF FILE f) BOOL:
        (INT j:= UPB buffer;
        IF char number(f) > j
        THEN WHILE buffer[j] /= " " DO j -:= 1 OD
        FI;
        print((buffer[ :j], newline));
        reset(f);
        put(f, buffer[j+1: ]);
        FOR i FROM UPB buffer -j+1 TO UPB buffer
        DO buffer[i]:= " " OD;
        TRUE);
    on line end(file, empty buffer);
COMMENT The []CHAR associated with 'file' is like a book containing
one page containing one line. As soon as we call 'newline(file)',
therefore, we shall find that the page has overflowed (the current
position will actually be at '(1,2,1)'). COMMENT
    on page end(file, empty buffer);
    STRUCT (INT day, [1:3] CHAR month, INT year) date;
COMMENT We shall frequently have occasion to print dates. Here is a
FORMAT to do it. COMMENT
    FORMAT datef = $ g(0)x, 3ax, 2d $;
    PROC generate =
        (REF PERSON infant, father, mother,
            STRING given name, BOOL male) VOID:
    IF male OF father
        AND NOT male OF mother AND NOT dead OF mother
    THEN
        OP PLUSAB =
        (REF FLEX[]REF PERSON names, REF PERSON pers) VOID:
        names:= (INT upb = UPB names;
            [1:upb + 1]REF PERSON new names;
            new names[1:upb] :=names;
            new names[upb + 1]:= pers; new names);
        infant:= (surname OF mother,
            given name,
            father,
            mother,
            NIL,
            (), # not yet! #
            alive,
            male);
        children OF father PLUSAB infant;
        children OF mother PLUSAB infant;
        IF wife OF father :=: mother
COMMENT That was an identity relation. If you have not yet read 5.7.4,
please accept our assurance that ':=:' is a sort of operator which
yields TRUE if the two names which are its operands in fact are the
same name.  In this case, the operands were of mode REF PERSON, and
IF the PERSON's REF'ed to turn out to be the same PERSON COMMENT
        THEN
            putf(file,
              ( $2l"Birth."
                    l 4x g$,        surname OF infant,
                $". On " f(datef)$, date,
                $" to "g$,          given OF mother,
                $", wife of "g$,    given OF father,
                $", a "c("darling",
                         "bouncing",
                         "beautiful",
                         "tiny")$,  randint(4),
                $x b("son", "daughter")
                " - "$,             male,
                $g"."$,             given name))
COMMENT ELSE no comment COMMENT
        FI
COMMENT The above call of 'putf' is intended to produce messages such
as:
    Birth.
        Fitzwilliam. On 3 MAR 28 to Eleanor, wife of
    Ebenezer, a beautiful son - Japhet. COMMENT
    ELSE stop # the birth was quite impossible #
    FI; # end of generate #
COMMENT The following procedure is intended to print the name of some
PERSON, together with details of his parents. However, if there is
some doubt about the marital state of the parents, then we shall draw a
discreet veil over the matter by using a different FORMAT. COMMENT
    PROC details = (REF PERSON pers) VOID:
        IF mother OF pers :=:
                REF PERSON (wife OF father OF pers)
        THEN
            BOOL sex = male OF pers;
            putf(file,
                ($ g ", " $,           given OF pers,
                    $ c("only", "youngest", "younger",
                        "eldest", "elder", "") x $,
                    (INT j:= 0, k;
                    REF FLEX [] REF PERSON children =
                            children OF father OF pers;
                    INT upb = UPB children;
                    FOR i TO upb # each brother/sister of pers #
                    DO REF PERSON child = children[i];
                            (male OF child = sex | j+:= 1);
                            (given OF child = given OF pers | k:= j)
                    OD;
                    (j=1 | 1 # only #
                    |: k=j | 2+ ABS (j=2) # youngest or younger #
                    |: k=1 | 4+ ABS (j=2) # eldest or elder #
                    | 6)),
                $ b("son", "daughter")
                    " of " $,          sex,
                $ g " and ", g x, g $, given OF father OF pers,
                                       names(mother OF pers) ))
            ELSE putf(file, ($ g x, g $, names(pers)))
            FI;  # end of details #
        PROC marry = ( REF PERSON bride, groom) VOID:
            IF
                male OF groom AND NOT dead OF groom
                AND NOT male OF bride AND NOT dead OF bride
                AND   (wife OF groom :=: nobody | TRUE
                      | dead OF wife OF groom)
                AND   (wife OF bride # sic # :=: nobody | TRUE
                      | dead OF wife OF bride)
            THEN
                wife OF groom:= bride;
                wife OF bride:= groom;
COMMENT We are now going to produce a message such as:
    Marriage.
        Fitzwilliam/Jones. On 1 APR 24, Eleanor, only
    daughter of Emrys and Myfanwy Jones to Ebenezer,
    elder son of Aloysius and Anastasia Fitzwilliam.  COMMENT
                putf(file,
                    ($ 2l "Marriage."
                        l 4x g "/", g". On " $,
                        surname OF groom, surname OF bride,
                    $ f(datef) ", " $, date));
                details(bride);
                put(file, " to ");
                details(groom);
                put(file, ".");
                surname OF bride:= surname OF groom
            ELSE stop
                    # the marriage is impossible, or illegal, or both #
            FI;  # end of marry #
        PROC kill = (REF PERSON bloke) VOID:
            IF NOT dead OF bloke
            THEN
                dead OF bloke:= TRUE;
                BOOL sex = male OF bloke;
                BOOL wa # wife alive # =
                    (wife OF bloke :=: nobody | FALSE
                    | NOT dead OF wife OF bloke);
                STRING # name of # wife =
                                (wa | given OF wife OF bloke | "" );
COMMENT The following call of 'putf' is intended to produce messages
such as:
    Death.
        On 21 DEC 68, Ebenezer, elder son of Aloysius
    and Anastasia Fitzwilliam, mourned by his devoted
    wife Eleanor COMMENT
                putf(file,
                ( $ 2l "Death."
                    l4x "On " f(datef) ", " $, date));
                details(bloke);
                IF wa
                THEN
                    putf(file,
                        ( $", mourned by "
                        b("his", "her") x,
                        c("everloving", "devoted",
                            "thankful") x,
                        b("wife", "husband"),
                        x g $,
                        sex, randint(3), sex, wife))
                FI;
COMMENT If 'bloke' has surviving descendants, the dirge continues in
the following vein:
    and his children Shem, Ham and Japhet and his
  grandchildren Ananias, Azarias and Misael and his
  great-grandchild Tom. COMMENT
                BOOL mp # mourners printed # := wa;
COMMENT The following PROC calls itself recursively for each
generation. COMMENT
                PROC print children of = ([]REF PERSON parents,
                        INT generation) VOID:
                BEGIN INT i:=0, j:=0;
                    [1: (INT i := 0;
                        FOR j TO UPB parents
                        DO i +:= UPB children OF parents[j] OD;
                        i) ] REF PERSON children, living children;
                    FOR k TO UPB parents
                    DO FOR l TO UPB children OF parents[k]
                        DO REF PERSON child =
                                (children OF parents[k]) [l];
                            children[i +:= 1] :=
                                (NOT dead OF child
                                |living children[j +:= 1] := child
                                |child)
                        OD
                    OD;
                    IF j /= 0
                    THEN # there are living children to be printed #
                        putf(file,
                        ( $ f(mp | $ " and" $ |: wa | $ "," $
                                 | $ "mourned by" $),
                            x b("his", "her") x,
                            n(generation-1) "great-"
                            f(generation /= 0 | $ "grand" $ | $ $),
                            "child" f(j /= 1 | $ "ren" $ | $ $) x,
                            n(j) (g, f((j-:=1) + 1
                                        | $ $, $ " and " $
                                        | $ ", " $))$,
                          sex,
                          ( [1:j] STRING names;
                              FOR i TO j
                              DO names[i]:=
                                      given OF living children[i]
                              OD;
                              names) ));
                    mp:= TRUE
                FI;
                IF UPB children /= 0
                THEN print children of(children, generation + 1)
                FI
            END # of print children of #;
            print children of(bloke, 0);
            put(file, ".")
        ELSE stop # the bloke was dead already #
        FI # end of kill #;
COMMENT Now we are ready to start our tale. Since we do not wish to go
right back to Adam, we shall start by declaring the story so far:
COMMENT
    PERSON aloysius :=
        ("Fitzwilliam", "Aloysius", SKIP, SKIP, SKIP, (),
            dead, male);
    PERSON anastasia :=
        ("Fitzwilliam", "Anastasia", SKIP, SKIP, aloysius, (),
            dead, female);
    PERSON ebenezer :=
        ("Fitzwilliam", "Ebenezer", aloysius, anastasia, NIL, (),
            alive, male);
    PERSON alaric :=
        ("Fitzwilliam", "Alaric", aloysius, anastasia, NIL, (),
            alive, male);
COMMENT We were unable to include 'anastasia' as 'aloysius'' wife when
initialising him, because her declaration had not been elaborated at
that time (cf. 3.2.E7).  We can rectify this, and the similar case of
their children, now COMMENT
    wife OF aloysius := anastasia;
    children OF aloysius := children OF anastasia :=
        (ebenezer, alaric);
COMMENT We shall declare the next family differently, so avoiding this
problem: COMMENT
    PERSON emrys, myfanwy, frederick, eleanor;
    emrys:= ("Jones", "Emrys", SKIP, SKIP, myfanwy,
                    (frederick, eleanor), dead, male);
    myfanwy:= ("Jones", "Myfanwy", SKIP, SKIP, emrys,
                    children OF emrys, alive, female);
    frederick:= ("Jones", "Frederick", emrys, myfanwy, NIL, (),
                    alive, male);
    eleanor:= ("Jones", "Eleanor", emrys, myfanwy, NIL, (),
                    alive, female);
    PERSON shem, ham, japhet, ananias, azarias, misael, tom;
COMMENT These are the unborn generations, and are therefore undefined.
COMMENT
    date := (1, "APR", 24); marry(eleanor, ebenezer);
    date := (1, "JAN", 25); generate(shem, ebenezer, eleanor,
                "Shem", male);
COMMENT We don't waste much time in this program. COMMENT
    date := (31, "MAR", 26); generate(ham, ebenezer, eleanor,
                "Ham", male);
    date := (3, "MAR", 28); generate(japhet, ebenezer, eleanor,
                "Japhet", male);
COMMENT This will produce the example given in the PROC 'generate'.
COMMENT
    date := (14, "JUL", 48);
COMMENT Now we need to declare some eligible young ladies. COMMENT
    PERSON a, b, josie, rosie;
    josie := ("Smith", "Josephine", a, b, NIL, (), alive, female);
    rosie := ("Smith", "Rose", a, b, NIL, (), alive, female);
    marry(josie, shem);
    date := (23, "JAN", 49); generate(ananias, shem, josie,
                "Ananias", male);
COMMENT Well, perhaps it was premature. COMMENT
    date := (14, "DEC", 50); generate(azarias, shem, josie,
                "Azarias", male);
    date := (29, "FEB", 52); kill(josie);
COMMENT Alas! But ... COMMENT
    date := (28, "DEC", 52); marry(rosie, shem);
COMMENT There are some interesting ecclesiastical problems in that
one. COMMENT
    date := (14, "JAN", 54); generate(misael, shem, rosie,
                "Misael", male);
COMMENT Here is a not-so-eligible young lady: COMMENT
    PERSON x :=
        (CHAR(SKIP), CHAR(SKIP), SKIP, SKIP, NIL,
            REF PERSON(SKIP), alive, female);
    date := (20, "DEC", 68); generate(tom, azarias, x, "Tom", male);
COMMENT And so the permissive society has arrived. Nothing will be
printed. COMMENT
    date := (21, "DEC", 68); kill(ebenezer);
COMMENT Poor chap! this will produce the example given in the PROC
'kill'. COMMENT
    newline(file); newline(file) # to ensure that the final contents
                                   of the buffer get printed #
END
