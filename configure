#!/bin/sh
#
# This file is part of Algol 68 Genie - an Algol 68 interpreter.
# Copyright (C) 2001-2010 J. Marcel van der Veer <algol68g@xs4all.nl>.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# configure: configuring script for Algol 68 Genie.
#
A68G_NAME="a68g"
MAKEFILE=makefile
VERSION_NUMBER="2.0.0"
REVISION="Version $VERSION_NUMBER"
MONTH="September"
YEAR="2010"
DATE=`date +"%e %B %Y %H:%M"`
TIME_STAMP="$MONTH $YEAR"
RELEASE_DATE="released $TIME_STAMP"
PACKAGE="algol68g-$VERSION_NUMBER"
warnings=
libplot=
libgsl=
libpostgresql=
compiler=
# Where does the system store things
PWD=`pwd`
SYS_INC=/usr/include
SYS_LIB=/usr/lib
SYS_BIN=/usr/bin
SYS_LOC=/usr/local
LOC_INC=$SYS_LOC/include
LOC_LIB=$SYS_LOC/lib
A68G_CHECK="./regression-$VERSION_NUMBER"
A68G_DOC="./doc"
A68G_HTML_TEMPLATES="$A68G_DOC/html"
A68G_LATEX_TEMPLATES="$A68G_DOC/latex"
A68G_SOURCE="./source"
SQL_DIR=$SYS_LOC/pgsql
UPLOAD_DIR="upload-$VERSION_NUMBER"
BUILD_FILE="$A68G_SOURCE/$MAKEFILE"
CONFIG_FILE="$A68G_SOURCE/config.h"
TEST_FILE="$A68G_CHECK/regression"
LINK_COLOUR="blue"
BACKGROUND_COLOUR="#e0e0e8"
echo "Algol 68 Genie $REVISION $RELEASE_DATE"
echo "$PACKAGE `uname -mrs` $DATE"
#
USERID=`whoami`
POWERPC=`uname -a | grep powerpc`
PPC=`uname -a | grep ppc`
X86=`uname -a | grep [3456]86`
BSD=`uname -s | grep BSD`
LINUX=`uname -a | grep Linux`
OPENBSD=`uname -s | grep OpenBSD`
MACOSX=`uname -a | grep Darwin`
#
# Option processing
#
build=no
lint=no
html_opt=no
tex_opt=no
pdf_opt=no
indent_opt=no
ld_opt=
opt=
prev_arg=
threads=no
warn="-w"
dist_opt=no
upload=no
CONFIGURE_OPTIONS=
#
#
#
for arg in "$@"
do
	CONFIGURE_OPTIONS=`echo $CONFIGURE_OPTIONS $arg`
# Handle option = value
	if [ -n "$prev_arg" ]
	then
		eval "$prev_arg=\$arg"
		ac_prev=
		continue
	fi
# Process accepted formats
	case "$arg"
	in
		-*=*)
			val_arg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
		*)      
			val_arg= ;;
	esac
# Process current option
	case "$arg"
	in
	-b | --build)
		build=yes ;;
	-cc | --cc)
		prev_arg=cc ;;
	-cc=* | --cc=*)
		cc=$val_arg ;;
	-lint)
		lint=;;
	-debug | --debug)
		opt=`echo $opt "-ggdb"`
		ld_opt=`echo $ld_opt "-ggdb"` ;;
	-dist | --dist)
		dist_opt=;;
	-html | --html)
		html_opt=;;
	-ps | --ps)
		tex_opt=;;
	-pdf | --pdf)
		pdf_opt=;;
	-indent | --indent)
		indent_opt=;;
	-linux)
		LINUX="assumed linux" ;;
	-macosx)
		MACOSX="assumed macos x" ;;
	-profile | --profile)
		opt=`echo $opt "-pg"`
		ld_opt=`echo $ld_opt "-pg"` ;;
	-incdir | --incdir)
		prev_arg=INCLUDE_DIR ;;
	-incdir=* | --incdir=*)
		INCLUDE_DIR=$val_arg ;;
	-libdir | --libdir)
		prev_arg=LIBRARY_DIR ;;
	-libdir=* | --libdir=*)
		LIBRARY_DIR=$val_arg ;;
	-bindir | --bindir)
		prev_arg=INSTALL_BIN ;;
	-bindir=* | --bindir=*)
		INSTALL_BIN=$val_arg ;;
	-mandir | --mandir)
		prev_arg=INSTALL_MAN ;;
	-mandir=* | --mandir=*)
		INSTALL_MAN=$val_arg ;;
	-O0)
		opt=`echo $opt "-O0"` ;;
	-O | -O1)
		opt=`echo $opt "-O"` ;;
	-O2)
		opt=`echo $opt "-O2"` ;;
	-O3)
		opt=`echo $opt "-O3"` ;;
	-O4 | -O5 | -O6 | -O7 | -O8 | -O9)
		opt=`echo $opt "-O2 -march=prescott"` ;;
	-threads | --threads)
		threads=;;
	-upload | --upload)
		upload=;;
	-version | --version | -v | --v)
		echo "$PACKAGE"
		exit ;;
	-warn | --warnings)
		warn="-pedantic -Wall -Wextra -Wshadow -Wconversion -Wstrict-prototypes -Wint-to-pointer-cast -Wpointer-to-int-cast" ;;
	-help | --help | -? | ?)
		echo "usage: $0 [options]"
		cat << \_HELP
--bindir[=]DIR	set target directory for executable to DIR
--build		build target after configuring
--cc[=]CC		set C compiler to CC
--lint		runs lint programs on the source
--debug		set debugging mode
--help		print help and exit
--incdir[=]DIR	set include-directory for compilation to DIR
--libdir[=]DIR	set library-directory for compilation to DIR
--linux		assume platform is linux compatible
--macosx		assume platform is macos x compatible
--mandir[=]DIR	set target directory for manual page to DIR
--profile		set profiling mode
--threads		use POSIX threads enabling the parallel clause
--version		print version and exit
--warn		give warning messages during compilation
-O0			set optimisation level for compilation to -O0
-O			set optimisation level for compilation to -O
-O2			set optimisation level for compilation to -O2
_HELP
		exit 1 ;;
	*)
		echo "exiting: no such option: $arg"
		exit 1 ;;
	esac
done
#
# Check whether options emptied
#
if [ -n "$prev_arg" ]
then
	echo "exiting: missing argument to $prev_arg"
	exit 1
fi
#
# Sanity check on supported platform
#
if [ -z "$LINUX" -a -z "$MACOSX" ]
then
	echo "exiting: untested platform, force with option --linux or --macosx"
	exit 1
fi
#
# Generate upload files
#
if [ -z $upload ]
then
	./configure -threads -O
	make
	./a68g index > index.lst
	make clean
	if [ -d $UPLOAD_DIR ]
	then
		rm -fr $UPLOAD_DIR
	fi
	./configure -dist
	./configure -html
	./configure -ps
	./configure -pdf
	mkdir $UPLOAD_DIR
	cd $UPLOAD_DIR
	mv ../../$PACKAGE.devel.tgz .
	mv ../index.lst .
	cp ../configure .
	cp ../doc/latex/a68gdoc.pdf ./a68g-doc.pdf
	cp ../doc/algol.html .
	cp ../doc/html/a68g.png .
	cp ../doc/html/*.png .
	cp ../a68g.pdf .
	mkdir a68g-report
	cd a68g-report
	cp ../../doc/a68g-report.html .
	cp ../../doc/html/a68g.png .
	cd ..
	tar -czf a68g-report.tgz a68g-report
	tar -cjf a68g-report.bz2 a68g-report
	mkdir algol68g-$VERSION_NUMBER
	cd algol68g-$VERSION_NUMBER
	cp ../../read-me.txt .
	cp ../../copying.txt .
	cp ../../configure .
	cp ../../changes.txt .
	mkdir source
	cp ../../source/*.c source/
	cp ../../source/*.h source/
	rm source/config.h
	mkdir demo
	cp ../../demo/*.a68 demo/
	mkdir doc
	mkdir doc/man1
	cp ../../doc/man1/a68g.1 doc/man1/
	mkdir regression-$VERSION_NUMBER
	cd ..
	tar -cf algol68g-$VERSION_NUMBER.tar algol68g-$VERSION_NUMBER
	xz algol68g-$VERSION_NUMBER.tar
	mv algol68g-$VERSION_NUMBER.tar.xz algol68g-$VERSION_NUMBER.txz
	tar -czf algol68g-$VERSION_NUMBER.tgz algol68g-$VERSION_NUMBER
	tar -cjf algol68g-$VERSION_NUMBER.bz2 algol68g-$VERSION_NUMBER
	mkdir algol68g-$VERSION_NUMBER.win32
	cd algol68g-$VERSION_NUMBER.win32
	cp ../../read-me.txt .
	cp ../../copying.txt .
	cp ../../changes.txt .
	cp ../../win32/a68g-$VERSION_NUMBER.exe .
	mkdir demo
	cp ../../demo/*.a68 demo/
	cd ..
	zip -r algol68g-$VERSION_NUMBER.win32.zip algol68g-$VERSION_NUMBER.win32
	cd ..
	echo "$0 done"
	exit
fi
#
# Generate distribution
#
if [ -z $dist_opt ]
then
	cd ..
	tar -czf $PACKAGE.devel.tgz a68g
	echo "generated distribution"
	echo "$0 done"
	exit
fi
#
# Generate HTML documentation
#
if [ -z $html_opt ]
then
	pushd .
	cd $A68G_HTML_TEMPLATES
	for f in `echo *.html`
	do
		echo $f
		sed "s/REVISION/$REVISION/g" < $f | sed "s/VERSION_NUMBER/$VERSION_NUMBER/" | sed "s/TIME_STAMP/$TIME_STAMP/g" | sed "s/PACKAGE/$PACKAGE/g" | sed "s/LINK_COLOUR/$LINK_COLOUR/g" | sed "s/BACKGROUND_COLOUR/$BACKGROUND_COLOUR/g" | sed "s/OS_VERSION/`uname -mrs`/g" | sed "s/GCC_VERSION/`gcc -dumpversion | sed '2,$d'`/g" > ../$f
	done
	echo "generated HTML documentation"
	popd
	man doc/man1/a68g.1 -t > a68g.ps
	ps2pdf a68g.ps a68g.pdf
	rm a68g.ps
	echo "generated PDF documentation"
	echo "$0 done"
	exit
fi
#
# Generate PS documentation
#
if [ -z $tex_opt ]
then
	pushd .
	cd $A68G_LATEX_TEMPLATES
	echo "\Chapter{Algol 68 Genie manual page}{manpage}">a68g.man.tex
	echo "\markboth{\sc {Algol 68 Genie manual page}}{\sc {Appendices}}">>a68g.man.tex
	echo "The text below results from next command, if {\it a68g} is installed by the superuser on your system:">>a68g.man.tex
	echo "\begin{lstlisting}">>a68g.man.tex
	echo "$ man a68g">>a68g.man.tex
	echo "\end{lstlisting}">>a68g.man.tex
	echo "\begin{Verbatim}[fontsize=\relsize{-2}, numbers=none]">>a68g.man.tex
	man ~/a68g/doc/man1/a68g.1 | col -bx >>a68g.man.tex
	echo "\end{Verbatim}">>a68g.man.tex
	cd ./source/templates
	for f in `echo *.tex`
	do
		echo $f
		sed "s/A68G_REVISION/$REVISION/g" <$f | sed "s/VERSION_NUMBER/$VERSION_NUMBER/" | sed "s/TIME_STAMP/$TIME_STAMP/g" | sed "s/PACKAGE/$PACKAGE/g" | sed "s/OS_VERSION/`uname -mrs`/g" | sed "s/GCC_VERSION/`gcc -dumpversion | sed '2,$d'`/g" > ../$f
	done
	popd
	pushd .
	cd $A68G_LATEX_TEMPLATES
	make
	rm ./source/*.tex
	popd
	echo "generated postscript documentation"
	echo "$0 done"
	exit
fi
#
# Generate PDF documentation
#
if [ -z $pdf_opt ]
then
	pushd .
	cd $A68G_LATEX_TEMPLATES
	make pdf0
	popd
	echo "generated manual"
	echo "$0 done"
	exit
fi
#
# Indent source
#
if [ -z $indent_opt ]
then
	cd $A68G_SOURCE
	for f in `echo *.c`
	do
		echo $f
#		indent $f -l500 -br -ce -cdw -nfca -npsl -nut -i2 -nbad -cs -pcs -sob
		rm $f~
	done
	wc *.c *.h
	echo "indented source"
	echo "$0 done"
	exit
fi
#
# Run cppcheck
#
if [ -z $lint ]
then
	cd $A68G_SOURCE
	for f in `echo *.c`
	do
		cppcheck --all --force $f
	done
	for f in `echo *.c`
	do
		gcc $f -S -pedantic -W -Wall -Wshadow -Wconversion -Wstrict-prototypes -O -I/usr/include -I/usr/local/include -I/usr/local/pgsql/include -DENABLE_GRAPHICS -DENABLE_NUMERICAL -DENABLE_CURSES -DENABLE_TERMINFO -DENABLE_DIRENT -DENABLE_HTTP -DENABLE_REGEX -DENABLE_POSTGRESQL -DENABLE_IEEE_754 -DENABLE_PAR_CLAUSE -o /dev/null
	done
	splint *.c -weak +ret-val-int +posixlib -abstract -unrecog -I/usr/include -I/usr/local/include -I/usr/local/pgsql/include -DENABLE_GRAPHICS -DENABLE_NUMERICAL -DENABLE_CURSES -DENABLE_TERMINFO -DENABLE_DIRENT -DENABLE_HTTP -DENABLE_REGEX -DENABLE_POSTGRESQL -DENABLE_IEEE_754 -DENABLE_PAR_CLAUSE -DENABLE_COMPILER
	echo "$0 done"
	exit
fi
#
# Initialise configuration header file
#
cat >$CONFIG_FILE <<\_CONFIG_EOF
/*!
\file config.h
\brief configuration switches
**/

/*
This file is part of Algol68G - an Algol 68 interpreter.
Copyright (C) 2001-2010 J. Marcel van der Veer <algol68g@xs4all.nl>.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program. If not, see <http://www.gnu.org/licenses/>.
*/

/*
This file defines among other system dependencies that cannot be detected 
reliably in an automatic way. These dependencies are

   ENABLE_COMPILER
   ENABLE_SYS_STACK_CHECK
   ENABLE_X_TITLE
   ENABLE_WIN32

Define or undefine the directives below depending on your system.
You can also set them when using `make' by using the CFLAGS parameter:

   make CFLAGS=-DENABLE_SYS_STACK_CHECK

Refer to the file INSTALL.
*/

#if ! defined A68G_CONFIG_H
#define A68G_CONFIG_H

/*
If you want the interpreter to check the system stack then define
ENABLE_SYS_STACK_CHECK. This check assumes that the stack grows linearly (either
upwards or downwards) and that the difference between (1) the address of a local
variable in the current stack frame and (2) the address of a local variable in
a stack frame at the start of execution of the Algol 68 program, is a measure
of system stack size.
*/

#if ! defined ENABLE_SYS_STACK_CHECK
#define ENABLE_SYS_STACK_CHECK
#endif

/*
Did you edit GNU libplot so you can modify X Window titles? If yes then define
ENABLE_X_TITLE else undefine it.
*/

#if ! defined ENABLE_X_TITLE
#undef ENABLE_X_TITLE
#endif

/*
When defining ENABLE_WIN32 you may want to change directives following the 
definition below to reflect your particular system.
ENABLE_IEEE_754 is ok for Pentiums.
*/

#if ! defined ENABLE_WIN32
#undef ENABLE_WIN32
#endif

#if defined ENABLE_WIN32
#define ENABLE_GRAPHICS 1
#define ENABLE_IEEE_754 1
#define ENABLE_NUMERICAL 1
#define ENABLE_REGEX 1
#if defined ENABLE_GRAPHICS
#define X_DISPLAY_MISSING 1
#define POSTSCRIPT_MISSING 1
#endif
#undef ENABLE_COMPILER
#undef ENABLE_CURSES
#undef ENABLE_HTTP
#undef ENABLE_PAR_CLAUSE
#undef ENABLE_POSTGRESQL
#undef ENABLE_POSTGRESQL
#undef ENABLE_X_TITLE
#endif
_CONFIG_EOF
#
# Can we write to the current dir?
#
if ! [ -w "`pwd`" ]
then
	echo "exiting: $USERID cannot write to present working directory `pwd`"
	exit 1
fi
#
# Find a C compiler, first gcc and than cc; otherwise fail
#
if [ -z $cc ]
then
	printf "checking for C compiler in $SYS_BIN ... "
	if [ -f $SYS_BIN/gcc ]
	then
		cc=gcc
		if [ -n "$OPENBSD" ]
		then
			opt=`echo $opt "-pthread"`
		fi
	elif [ -f $SYS_BIN/cc ]
	then
		cc=cc
	else
		echo "exiting: cannot find a C compiler"
		rm -f $MAKEFILE
		exit 1
	fi
	echo "found $cc"
fi
if [ "$cc" = "gcc" ]
then
	printf "checking that gcc works ... "
	gcc --version > /dev/null 2>&1
	if [ "$?" = "0" ]
	then
		echo "yes"
	else
		echo "no"
		exit 1
	fi
fi
#
# Find default directories
#
# Find default INCLUDE_DIR if none was given
if [ -z $INCLUDE_DIR ]
then
	printf "include directory ... "
	if [ -d $SYS_LOC/include ]
	then
		INCLUDE_DIR=$SYS_LOC/include
	else
		INCLUDE_DIR=$SYS_INC
	fi
	echo $INCLUDE_DIR
fi
#
# Find default LIBRARY_DIR if none was given
#
if [ -z $LIBRARY_DIR ]
then
	printf "library directory ... "
	if [ -d $SYS_LOC/lib ]
	then
		LIBRARY_DIR=$SYS_LOC/lib
	else
		LIBRARY_DIR=$SYS_LIB
	fi
	echo $LIBRARY_DIR
fi
#
# Find INSTALL_BIN if none was given
#
if [ -z $INSTALL_BIN ]
then
	printf "target binary directory ... "
	if [ -d $SYS_LOC/bin ]
	then
		INSTALL_BIN=$SYS_LOC/bin
	elif [ -d /usr/share/bin ]
	then
		INSTALL_BIN=/usr/share/bin
	elif [ -w $SYS_BIN ]
	then
		INSTALL_BIN=$SYS_BIN
	elif [ 	-d ~/bin ]
	then
		INSTALL_BIN=~/bin
	else
		INSTALL_BIN=`pwd`
	fi
	echo $INSTALL_BIN
elif ! [ -d $INSTALL_BIN ]
then
	echo "exiting: $INSTALL_BIN is not a valid directory"
	exit 1
fi
#
if ! [ -w $INSTALL_BIN ]
then
	warn1=`echo "warning: $USERID cannot write to $INSTALL_BIN, will write to $PWD"`
	if [ -f $INSTALL_BIN/a68g ]
	then
		warn2=`echo "warning: $INSTALL_BIN/a68g already exists which may cause confusion"`
	fi
	warnings=yes
	INSTALL_BIN=`pwd`
fi
if ! [ -w $LOC_INC ]
then
	warn5=`echo "warning: $USERID cannot write to $LOC_INC, will write to $PWD"`
	if [ -f $LOC_INC/a68g.h ]
	then
		warn6=`echo "warning: $LOC_INC/a68g.h already exists which may cause confusion"`
	fi
	warnings=yes
	LOC_INC_COMPILER=`pwd`
else
	LOC_INC_COMPILER=$LOC_INC
fi
# Find default INSTALL_MAN if none was given
if [ -z $INSTALL_MAN ]
then
	printf "target man directory ... "
	if [ -d $SYS_LOC/man/man1 ]
	then
		INSTALL_MAN="$SYS_LOC/man/man1"
	elif [ -d /usr/share/man/man1 ]
	then
		INSTALL_MAN="/usr/share/man/man1"
	elif [ -w /usr/man/man1 ]
	then
		INSTALL_MAN="/usr/man/man1"
	elif [ -d ~/man ]
	then
		INSTALL_MAN="~/man"
	else
		INSTALL_MAN=`pwd`
	fi
	echo $INSTALL_MAN
elif ! [ -d $INSTALL_MAN ]
then
	echo "exiting: $INSTALL_MAN is not a valid directory"
	exit 1
fi
#
if ! [ -w $INSTALL_MAN ]
then
	warn3=`echo "warning: $USERID cannot write to $INSTALL_MAN, will write to $PWD"`
	warnings=yes
	INSTALL_MAN=`pwd`
fi
#
# Are the necessary includes all there?
#
err=no
for inc in assert.h ctype.h errno.h fcntl.h limits.h math.h setjmp.h signal.h stdio.h stdlib.h string.h sys/resource.h sys/stat.h sys/time.h sys/times.h sys/types.h sys/wait.h time.h unistd.h
do
	printf "checking for $inc ... "
	if ! [ -f $SYS_INC/$inc ]
	then
		echo "no"
		err=yes
	else
		echo "yes"
	fi
done
#
if [ "$err" = "yes" ]
then
	echo "exiting: not all include files found"
	exit 1
fi
#
# Generate top level makefile
#
echo "# $MAKEFILE generated on `date` by $USERID." 1>$MAKEFILE
echo "SHELL=/bin/sh" 1>>$MAKEFILE
echo "PACKAGE_NAME=$PACKAGE" 1>>$MAKEFILE
echo "INSTALL_BIN=$INSTALL_BIN" 1>>$MAKEFILE
echo "A68G_SOURCE=$A68G_SOURCE" 1>>$MAKEFILE
echo "A68G_DOC=$A68G_DOC" 1>>$MAKEFILE
echo "A68G_CHECK=$A68G_CHECK" 1>>$MAKEFILE
echo "LOC_INC=$LOC_INC" 1>>$MAKEFILE
echo "INSTALL_MAN=$INSTALL_MAN" 1>>$MAKEFILE
echo "COMPILER_INC=$LOC_INC_COMPILER" 1>>$MAKEFILE
#
cat >>$MAKEFILE <<\_MAKE_EOF
all a68g::
	@cd $(A68G_SOURCE); $(MAKE) CPP_FLAGS="$(CPP_FLAGS)" CFLAGS="$(CFLAGS)" LD_FLAGS="$(LD_FLAGS)"; cd ..
	@mv $(A68G_SOURCE)/a68g .
	@cat $(A68G_SOURCE)/config.h $(A68G_SOURCE)/algol68g.h $(A68G_SOURCE)/diagnostics.h $(A68G_SOURCE)/environ.h $(A68G_SOURCE)/genie.h $(A68G_SOURCE)/gsl.h $(A68G_SOURCE)/inline.h $(A68G_SOURCE)/mp.h $(A68G_SOURCE)/transput.h > a68g.h
install:	all
	@install -m 755 ./a68g $(INSTALL_BIN)
	@install -m 644 ./a68g.h $(COMPILER_INC)
	@install -m 644 $(A68G_DOC)/man1/a68g.1 $(INSTALL_MAN)
uninstall:
	@rm -f $(INSTALL_BIN)/a68g $(INSTALL_MAN)/a68g.1 $(COMPILER_INC)/a68g.h
depend:
	@cd $(A68G_SOURCE); $(MAKE) depend; cd ..
regression:  all
	@cd $(A68G_CHECK); ./regression; cd ..
clean:
	@cd $(A68G_SOURCE); $(MAKE) clean; cd ..
	@rm -f *.tmp out core .a68g.cmd.*
distclean mostlyclean maintainer-clean: clean
	@rm -f makefile $(A68G_SOURCE)/makefile
	@rm -f a68g
	./configure -anonymous
	./configure -html
dist:   distclean
	./configure -dist
TAGS info dvi:
	@echo "target not implemented"
_MAKE_EOF
echo "generated ./$MAKEFILE"
#
# Generate source level makefile
#
echo "# $BUILD_FILE generated on `date` by $USERID." 1>$BUILD_FILE
echo "SHELL=/bin/sh" 1>>$BUILD_FILE
echo "INSTALL_BIN=$INSTALL_BIN" 1>>$BUILD_FILE
echo "LIBRARY_DIR=$LIBRARY_DIR" 1>>$BUILD_FILE
echo "INCLUDE_DIR=$INCLUDE_DIR" 1>>$BUILD_FILE
echo "SYS_INC=$SYS_INC" 1>>$BUILD_FILE
echo "CC=$cc" 1>>$BUILD_FILE
#
# Find POSIX threads
#
if [ -z $threads ]
then
	printf "checking for POSIX threads ... "
	if [ -f $SYS_INC/pthread.h ]
	then
		if [ -f $SYS_LIB/libpthread.so -o -f $SYS_LIB/libpthread.a -o -f $SYS_LIB/libpthread.dylib ]
		then
			echo "yes"
			echo "POSIX_THREADS_LIBS=-lpthread" 1>>$BUILD_FILE
			echo "POSIX_THREADS_FLAG=-DENABLE_PAR_CLAUSE" 1>>$BUILD_FILE
		else
			echo "no"
		fi
	else
		echo "no"
	fi
else
	warn0=`echo "warning: parallel clause will be disabled (use option --threads)"`
	warnings=yes
fi
#
# Find GNU Plotutils
#
printf "checking for GNU plotutils ... "
if [ -f $INCLUDE_DIR/plot.h -o -f $SYS_INC/plot.h ]
then
	if [ -f $LIBRARY_DIR/libplot.so -o -f $LIBRARY_DIR/libplot.a -o -f $LIBRARY_DIR/libplot.dylib -o -f $SYS_LIB/libplot.so ]
	then
		libplot=yes
		echo "yes"
		echo "PLOTUTILS_LIBS=-lplot" 1>>$BUILD_FILE
		echo "PLOTUTILS_FLAG=-DENABLE_GRAPHICS" 1>>$BUILD_FILE
	else
		echo "no"
	fi
else
	echo "no"
fi
#
# Find GSL
#
printf "checking for GNU scientific library ... "
if [ -d $INCLUDE_DIR/gsl -o -d $SYS_INC/gsl ]
then
	if [ -f $LIBRARY_DIR/libgsl.so -o -f $LIBRARY_DIR/libgsl.a -o -f $SYS_LIB/libgsl.so -o -f $SYS_LIB/libgsl.a -o -f $LIBRARY_DIR/libgsl.dylib ]
	then
		if [ -f $LIBRARY_DIR/libgslcblas.so -o -f $LIBRARY_DIR/libgslcblas.a -o -f $SYS_LIB/libgslcblas.so -o -f $SYS_LIB/libgslcblas.a -o -f $LIBRARY_DIR/libgslcblas.dylib ]
		then
			libgsl=yes
			echo "yes"
			echo "GSL_LIBS=-lgsl -lgslcblas" 1>>$BUILD_FILE
			echo "GSL_FLAG=-DENABLE_NUMERICAL" 1>>$BUILD_FILE
		else
			echo "no"
		fi
	else
		echo "no"
	fi
else
	echo "no"
fi
#
# Find curses
#
printf "checking for ncurses ... "
if [ -f $SYS_LIB/libncurses.so -o -f $SYS_LIB/libncurses.a -o -f $SYS_LIB/libncurses.dylib ]
then
	echo "yes"
	echo "CURSES_LIBS=-lncurses" 1>>$BUILD_FILE
	echo "CURSES_FLAG=-DENABLE_CURSES" 1>>$BUILD_FILE
else
	echo "no"
	printf "checking for curses ... "
	if [ -f $SYS_LIB/libcurses.so -o -f $SYS_LIB/libcurses.a -o -f $SYS_LIB/libcurses.dylib ]
	then
		echo "yes"
		echo "CURSES_LIBS=-lcurses" 1>>$BUILD_FILE
		echo "CURSES_FLAG=-DENABLE_CURSES" 1>>$BUILD_FILE
	else
		echo "no"
	fi
fi
#
# Find terminfo 
#
printf "checking for terminfo ... "
if [ -f $SYS_INC/term.h ]
then
	if [ -d /usr/share/terminfo -o -d /usr/local/share/terminfo ]
	then
		echo "yes"
		echo "TERMINFO_FLAG=-DENABLE_TERMINFO" 1>>$BUILD_FILE
	else
		echo "no"
	fi
else
	echo "no"
fi
#
# Find dirent
#
printf "checking for dirent ... "
if [ -f $INCLUDE_DIR/dirent.h -o -$SYS_INC/dirent.h ] 
then
	echo "yes"
	echo "DIRENT_FLAG=-DENABLE_DIRENT" 1>>$BUILD_FILE
else
	echo "no"
fi
#
# Find HTTP support
#
printf "checking for HTTP support ... "
if [ -f $SYS_INC/netdb.h -a -f $SYS_INC/arpa/inet.h -a -f $SYS_INC/netinet/in.h -a -f $SYS_INC/sys/socket.h ]
then
	echo "yes"
	echo "HTTP_FLAG=-DENABLE_HTTP" 1>>$BUILD_FILE
else
	echo "no"
fi
#
# Find regular expression support
#
printf "checking for regular expression support ... "
if [ -f $SYS_INC/regex.h ]
then
	echo "yes"
	echo "REGEX_FLAG=-DENABLE_REGEX" 1>>$BUILD_FILE
else
	echo "no"
fi
#
# Find PostgreSQL libraries
#
printf "checking for PostgreSQL ... "
if [ -f $SQL_DIR/include/libpq-fe.h -o -f $INCLUDE_DIR/libpq-fe.h -o -f $SYS_INC/libpq-fe.h ]
then
	if [ -f $SQL_DIR/lib/libpq.so -o -f $SQL_DIR/lib/libpq.a -o -f $SQL_DIR/lib/libpq.dylib ]
	then
		libpostgresql=yes
		echo "yes"
		echo "SQL_DIR=$SQL_DIR">>$BUILD_FILE
		echo "SQL_LIBS=-lpq" 1>>$BUILD_FILE
		echo "SQL_FLAG=-DENABLE_POSTGRESQL" 1>>$BUILD_FILE
	elif [ -f $SYS_LIB/libpq.so -o -f $SYS_LIB/libpq.a -o -f $SYS_LIB/libpq.dylib ]
	then
		libpostgresql=yes
		echo "yes"
		echo "SQL_DIR=`dirname $SYS_LIB`">>$BUILD_FILE
		echo "SQL_LIBS=-lpq" 1>>$BUILD_FILE
		echo "SQL_FLAG=-DENABLE_POSTGRESQL" 1>>$BUILD_FILE
	else
		echo "no"
	fi
else
	echo "no"
fi
#
# Find IEEE-754 compatibility
#
printf "checking for IEEE 754 floating point compatibility ... "
if [ -n "$POWERPC" -o -n "$PPC" -o -n "$X86" -o -n "$MACOSX" ]
then
	echo "yes"
	echo "IEEE_754_FLAG=-DENABLE_IEEE_754" 1>>$BUILD_FILE
else
	echo "unknown"
	printf "checking for IEEE 754 floating point support in $SYS_INC ... "
	if [ -f $SYS_INC/ieee754.h -o -f $SYS_INC/ieeefp.h -o -f $SYS_INC/machine/ieeefp.h ]
	then
		echo "yes"
		echo "IEEE_754_FLAG=-DENABLE_IEEE_754" 1>>$BUILD_FILE
	else
		echo "no: if your platform is IEEE 754 compatible then build with 'make CFLAGS=ENABLE_IEEE_754'"
	fi
fi
#
# Finish Makefile
#
if [ -n "$MACOSX" ]
then
	echo "MACOSX_FLAG=-DENABLE_MACOSX" 1>>$BUILD_FILE
fi
if [ -n "$LINUX" ]
then
	echo "LINUX_FLAG=-DENABLE_LINUX" 1>>$BUILD_FILE
fi
printf "STD_CFLAGS=-fno-common " 1>>$BUILD_FILE
if [ -d /opt/local/include ]
then
	printf -- "-I/opt/local/include " 1>>$BUILD_FILE
fi
if [ "$cc" = "gcc" ]
then
        if ! [ -d $SQL_DIR ]
        then
		echo "-I\$(INCLUDE_DIR) -I\$(SYS_INC) $warn $opt" 1>>$BUILD_FILE
	else
		echo "-I\$(INCLUDE_DIR) -I\$(SYS_INC) -I\$(SQL_DIR)/include $warn $opt" 1>>$BUILD_FILE
	fi
else
	echo "-I\$(INCLUDE_DIR)" 1>>$BUILD_FILE
fi
#
printf "STD_LD_FLAGS=" 1>>$BUILD_FILE
printf -- "-ltermcap " 1>>$BUILD_FILE
#
if [ -d /opt/local/lib ]
then
	printf -- "-L/opt/local/lib " 1>>$BUILD_FILE
fi
if [ "$cc" = "gcc" ]
then
        if ! [ -d $SQL_DIR ]
        then
		echo "-L\$(LIBRARY_DIR) $ld_opt" 1>>$BUILD_FILE
	else
		echo "-L\$(LIBRARY_DIR) -L\$(SQL_DIR)/lib $ld_opt" 1>>$BUILD_FILE
	fi
else
	echo "-L\$(LIBRARY_DIR)" 1>>$BUILD_FILE
fi
printf "checking whether a68g can compile units ... "
if [ "$cc" = "gcc" ]
then
	if [ -f /include/dlfcn.h -o -f /usr/include/dlfcn.h ]
	then
		if [ -f /usr/lib/libdl.so -o /usr/lib/libdl.dylib ]
		then
			if [ -f /bin/libtool -o /usr/bin/libtool ]
			then
				echo "yes"
				echo "COMPILER_FLAG=-DENABLE_COMPILER" 1>>$BUILD_FILE
				compiler=yes
			else
				echo "no"
			fi
		else
			echo "no"
		fi
	else
		echo "no"
	fi
else
	echo "no"
fi
# Sources
echo "HS=`echo $A68G_SOURCE/*.h | sort | sed 's/\.\/[a-zA-Z0-9]*\///g'`" 1>>$BUILD_FILE
echo "CS=`echo $A68G_SOURCE/*.c | sort | sed 's/\.\/[a-zA-Z0-9]*\///g' | sed 's/\.c/\.o/g'`" 1>>$BUILD_FILE
#
if [ -n "$LINUX" ]
then
cat >>$BUILD_FILE <<\_BUILD_EOF
FLAGS=$(CPPFLAGS) $(STD_CFLAGS) $(POSIX_THREADS_FLAG) $(COMPILER_FLAG) $(PLOTUTILS_FLAG) $(GSL_FLAG) $(CURSES_FLAG) $(IEEE_754_FLAG) $(HTTP_FLAG) $(REGEX_FLAG) $(TERMINFO_FLAG) $(SQL_FLAG) $(READLINE_FLAG) $(DIRENT_FLAG) $(MACOSX_FLAG) $(LINUX_FLAG) $(CFLAGS)
all:    a68g
a68g:   $(CS)
	@echo "building a68g ..."
	@$(CC) $(CS) -Wl,--export-dynamic $(CFLAGS) $(STD_LD_FLAGS) $(POSIX_THREADS_LIBS) $(PLOTUTILS_LIBS) $(GSL_LIBS) $(CURSES_LIBS) $(SQL_LIBS) $(READLINE_LIBS) -lm -ldl $(LD_FLAGS) -o a68g
$(CS): $(HS)
.c.o:
	@echo "compiling $<"
	@$(CC) -c $(FLAGS) $<
clean:
	@rm -f $(CS)
depend:
	@touch $(HS)
_BUILD_EOF
fi
if [ -n "$MACOSX" ]
then
cat >>$BUILD_FILE <<\_BUILD_EOF2
FLAGS=$(CPPFLAGS) $(STD_CFLAGS) $(POSIX_THREADS_FLAG) $(COMPILER_FLAG) $(PLOTUTILS_FLAG) $(GSL_FLAG) $(CURSES_FLAG) $(IEEE_754_FLAG) $(HTTP_FLAG) $(REGEX_FLAG) $(TERMINFO_FLAG) $(SQL_FLAG) $(READLINE_FLAG) $(DIRENT_FLAG) $(MACOSX_FLAG) $(LINUX_FLAG) $(CFLAGS)
all:    a68g
a68g:   $(CS)
	@echo "building a68g ..."
	@$(CC) $(CS) -Wl $(CFLAGS) $(STD_LD_FLAGS) $(POSIX_THREADS_LIBS) $(PLOTUTILS_LIBS) $(GSL_LIBS) $(CURSES_LIBS) $(SQL_LIBS) $(READLINE_LIBS) -lm -ldl $(LD_FLAGS) -o a68g
$(CS): $(HS)
.c.o:
	@echo "compiling $<"
	@$(CC) -c $(FLAGS) $<
clean:
	@rm -f $(CS)
depend:
	@touch $(HS)
_BUILD_EOF2
fi
echo "generated $BUILD_FILE"
#
# Make regression script
#
cat >$TEST_FILE <<\_REGRESSION_EOF
#! /bin/sh
#
# Locate a68g
#
if [ -f './a68g' ]
then
	A68='./a68g'
elif [ -f '../a68g' ]
then
	A68='../a68g'
else
	A68='a68g'
fi
#
# Locate reference a68g
#
if [ -f './a68g-ref' ]
then
	A68REF='./a68g-ref'
elif [ -f '../a68g-ref' ]
then
	A68REF='../a68g-ref'
else
	A68REF='a68g'
fi
# regression -DIR only checks files in DIR
if [ -n $1 ]
then
	cd ./$1
fi
#
echo $line
echo "a68g regression test versus reference"
date
uname -mrs
$A68 -version
$A68REF -version
pwd
echo "number of test programs: `find . -name "*.a68" -print | wc -l`"
#
for f in `find . -name "*.a68" -print | grep -v quote-stropping | sort`
do
	printf "" 1>&2
	printf "$f by interpreter ... " 1>&2
	$A68REF --regression $f > a.out
	$A68 --regression $f > b.out
	if [ $? == 0 ]
	then
		if [ -z "`diff --brief a.out b.out`" ] 
		then
			echo " same" 1>&2
		else
			echo " different" 1>&2
			echo "++++ $f by interpretation"
			diff a.out b.out
		fi
		printf "$f by compilation ... " 1>&2
		$A68 --regression -O $f > c.out
		if [ -z "`diff --brief b.out c.out`" ] 
		then
			echo " same" 1>&2
		else
			echo " different" 1>&2
			echo "++++ $f by compilation"
			diff b.out c.out
		fi
	else
		if [ -z "`diff --brief a.out b.out`" ] 
		then
			echo " same" 1>&2
		else
			echo " different" 1>&2
			echo "++++ $f by interpretation"
			diff a.out b.out
		fi
		echo "no compilation of $f" 1>&2
	fi
done
for f in `find . -name "*.c"`
do
	rm $f
done
for f in `find . -name "*.so"`
do
	rm $f
done
for f in `find . -name "*.tmp"`
do
	rm $f
done
for f in `find . -name "*.out"`
do
	rm $f
done
date
_REGRESSION_EOF
#
chmod +x $TEST_FILE
echo "generated $TEST_FILE"
#
# Generate a version header
#
echo "" 1>>$CONFIG_FILE
echo "#define A68G_NAME \"$A68G_NAME\"" 1>>$CONFIG_FILE
echo "" 1>>$CONFIG_FILE
#
if [ -f $INCLUDE_DIR/gsl/gsl_version.h ]
then
	echo "#define A68_GSL_VERSION \"`grep '#define GSL_VERSION ' $INCLUDE_DIR/gsl/gsl_version.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$CONFIG_FILE
elif [ -f $LOC_INC/gsl/gsl_version.h ]
then
	echo "#define A68_GSL_VERSION \"`grep '#define GSL_VERSION ' $LOC_INC/gsl/gsl_version.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$CONFIG_FILE
fi
if [ -f $INCLUDE_DIR/plot.h ]
then
	echo "#define A68_LIBPLOT_VERSION \"`grep '#define PL_LIBPLOT_VER_STRING ' $INCLUDE_DIR/plot.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$CONFIG_FILE
elif [ -f $LOC_INC/plot.h ]
then
	echo "#define A68_LIBPLOT_VERSION \"`grep '#define PL_LIBPLOT_VER_STRING ' $LOC_INC/plot.h | sed 's/#define[A-Z_ ]*//'`\"" | sed 's/\"\"/\"/g' 1>>$CONFIG_FILE
fi
if [ -f $INCLUDE_DIR/pg_config.h -o -f $SYS_INC/pg_config.h -o -f $SQL_DIR/include/pg_config.h ]
then	if [ "$cc" = "gcc" ]
	then
cat > pgvers.c <<_ACEOF
#include <stdio.h>
#include <pg_config.h>
int main (int argc, char **argv) {
	printf ("%s", PACKAGE_VERSION);
}
_ACEOF
		gcc pgvers.c -I$SQL_DIR/include -o pgvers
		echo "#define A68_PG_VERSION \"`./pgvers`\"" 1>>$CONFIG_FILE
		rm pgvers*
	else
		echo "#define A68_PG_VERSION \"unknown\"" 1>>$CONFIG_FILE
	fi
else
	echo "#define A68_PG_VERSION \"unknown\"" 1>>$CONFIG_FILE
fi
echo "#define COMPILER_INC \"$LOC_INC_COMPILER\"" 1>>$CONFIG_FILE
echo "#define CONFIGURE_DATE \"$DATE\"" 1>>$CONFIG_FILE
echo "#define CONFIGURE_OPTIONS \"$CONFIGURE_OPTIONS\"" 1>>$CONFIG_FILE
if [ -n "$LINUX" ]
then
	echo "#define GCC_OPTIONS \"-fPIC -fno-common -c $warn $opt\"" 1>>$CONFIG_FILE
	echo "#define LIBTOOL_OPTIONS \"\"" 1>>$CONFIG_FILE
fi
if [ -n "$MACOSX" ]
then
	echo "#define GCC_OPTIONS \"-fPIC -fno-common -dynamic -c $warn $opt\"" 1>>$CONFIG_FILE
	echo "#define LIBTOOL_OPTIONS \"-flat_namespace -undefined suppress -dynamic\"" 1>>$CONFIG_FILE
fi
if [ "$cc" = "gcc" ]
then
	echo "#define GCC_VERSION \"`gcc -dumpversion | sed '2,$d'`\"" 1>>$CONFIG_FILE
else
	echo "#define GCC_VERSION \"\"" 1>>$CONFIG_FILE
fi
echo "#define INSTALL_BIN \"$INSTALL_BIN\"" 1>>$CONFIG_FILE
echo "#define OS_NAME \"`uname -rs`\"" 1>>$CONFIG_FILE
echo "#define RELEASE_DATE \"$RELEASE_DATE\"" 1>>$CONFIG_FILE
echo "#define RELEASE_YEAR \"$YEAR\"" 1>>$CONFIG_FILE
echo "#define REVISION \"$REVISION\"" 1>>$CONFIG_FILE
echo "#define USERID \"$USERID\"" 1>>$CONFIG_FILE
echo "#define VERIFICATION \"$VERSION_NUMBER $DATE $CONFIGURE_OPTIONS\"" 1>>$CONFIG_FILE
echo "#define VERSION_NUMBER \"$VERSION_NUMBER\"" 1>>$CONFIG_FILE
echo "" 1>>$CONFIG_FILE
echo "#endif" 1>>$CONFIG_FILE
#
# Build target if required
#
if [ "$build" = "yes" ]
then
	echo "building $PACKAGE"
	make a68g
	case $?
	in
		0)
			;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
	printf "checking whether $PACKAGE exists ... "
	./a68g -version > /dev/null
	case $?
	in
		0)
			echo "ok" ;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
fi
#
echo ""
echo "configured $PACKAGE for `uname -rs`"
#
if [ "$compiler" = "yes" ]
then
	echo "$PACKAGE will compile with support for the unit compiler"
fi
#
if [ "$libplot" = "yes" ]
then
	echo "$PACKAGE will compile with support for the GNU plotting utilities"
fi
#
if [ "$libgsl" = "yes" ]
then
	echo "$PACKAGE will compile with support for the GNU scientific library"
fi
#
if [ "$libpostgresql" = "yes" ]
then
	echo "$PACKAGE will compile with support for Postgresql"
fi
#
if [ -n "$warn0" ]
then
	echo $warn0
fi
if [ -n "$warn1" ]
then
	echo $warn1
fi
if [ -n "$warn2" ]
then
	echo $warn2
fi
if [ -n "$warn3" ]
then
	echo $warn3
fi
if [ -n "$warn5" ]
then
	echo $warn5
fi
if [ -n "$warn6" ]
then
	echo $warn6
fi
#
echo ""
if [ -z $warnings ]
then
	echo "$0 done"
else
	echo "$0 done, with warnings"
fi
#
echo "now type 'make' followed by 'make install'"
exit
