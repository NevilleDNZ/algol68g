#! /bin/sh
#
# This file is part of Algol 68 Genie - an Algol 68 interpreter.
# Copyright (C) 2001-2005 J. Marcel van der Veer <algol68g@xs4all.nl>.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# configure: configuring script for Algol 68 Genie.
#
MAKEFILE=makefile
VERSION_NUMBER=8
PACKAGE="algol68g-mk$VERSION_NUMBER"
# Where does the system store things
SYS_INC=/usr/include
SYS_LIB=/usr/lib
SYS_BIN=/usr/bin
USR_CHK="./regression-mk$VERSION_NUMBER"
USR_SRC="./source"
BUILD_FILE="$USR_SRC/$MAKEFILE"
TEST_FILE="$USR_CHK/regression"
echo "configuring $PACKAGE"
#
userid=`whoami`
POWERPC=`uname -a | grep powerpc`
PPC=`uname -a | grep ppc`
X86=`uname -a | grep [3456]86`
echo "platform: $POWERPC $PPC $X86" 
#
# Option processing
#
prev_arg=
build=no
warn=-w
threads=no
opt=
ld_opt=
for arg in "$@"
do
# Handle option = value
	if [    -n "$prev_arg"  ]
	then
		eval "$prev_arg=\$arg"
		ac_prev=
		continue
	fi
# Process accepted formats
	case "$arg"
	in
		-*=*)
			val_arg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
		*)      
			val_arg= ;;
	esac
# Process current option
	case "$arg"
	in
	-b | --build)
		build=yes ;;
	-cc | --cc)
		prev_arg=cc ;;
	-cc=* | --cc=*)
		cc=$val_arg ;;
	-debug)
		opt=`echo $opt "-ggdb"`
		ld_opt=`echo $ld_opt "-ggdb"` ;;
	-profile)
		opt=`echo $opt "-pg"`
		ld_opt=`echo $ld_opt "-pg"` ;;
	-incdir | --incdir)
		prev_arg=USR_INC ;;
	-incdir=* | --incdir=*)
		USR_INC=$val_arg ;;
	-libdir | --libdir)
		prev_arg=USR_LIB ;;
	-libdir=* | --libdir=*)
		USR_LIB=$val_arg ;;
	-bindir | --bindir)
		prev_arg=USR_BIN ;;
	-bindir=* | --bindir=*)
		USR_BIN=$val_arg ;;
	-mandir | --mandir)
		prev_arg=man_dir ;;
	-mandir=* | --mandir=*)
		man_dir=$val_arg ;;
	-O0)
		opt=`echo $opt "-O0"` ;;
	-O)
		opt=`echo $opt "-O"` ;;
	-O2)
		opt=`echo $opt "-O2"` ;;
	-O3)
		opt=`echo $opt "-O3 -funroll-loops"` ;;
	-threads | --threads)
		threads=;;
	-version | --version | -v | --v)
		echo "$PACKAGE"
		exit ;;
	-w)
		warn="-W -Wall" ;;
	-help | --help | -? | ?)
		echo "usage: $0 [options]"
		cat << \_HELP
--incdir[=]DIR  	set include-directory for compilation to DIR
--libdir[=]DIR  	set library-directory for compilation to DIR
--bindir[=]DIR  	set target directory for executable to DIR
--mandir[=]DIR  	set target directory for manual page to DIR

--threads       	use POSIX threads enabling the parallel clause

--cc[=]CC       	set C compiler to CC
-debug  		set debugging mode
-profile                set profiling mode
-O0     		set optimisation level for compilation to -O0
-O      		set optimisation level for compilation to -O
-O2     		set optimisation level for compilation to -O2
-O3     		set optimisation level for compilation to -O3

--build 		build target after configuring
--help  		print help and exit
--version       	print version and exit
_HELP
		exit 1 ;;
	*)
		echo "exiting: no such option: $arg"
		exit 1 ;;
	esac
done
# Check whether options emptied
if [    -n "$prev_arg" ]
then
	echo "exiting: missing argument to $prev_arg"
	exit 1
fi
#
# Can we write to the current dir?
#
if ! [  -w `pwd`	]
then
	echo "exiting: $userid cannot write to `pwd`"
	exit 1
fi
#
# Find a C compiler, first gcc and than cc; otherwise fail
#
if [    -z $cc  ]
then
	echo -n "checking C compiler in $SYS_BIN: "
	if [    -f $SYS_BIN/gcc ]
	then
		cc=gcc
	elif [  -f $SYS_BIN/cc  ]
	then
		cc=cc
	else
		echo "exiting: cannot find a C compiler"
		rm -f $MAKEFILE
		exit 1
	fi
	echo "found $cc"
fi
#
# Find default directories
#
# Find default USR_INC if none was given
if [    -z $USR_INC     ]
then
	echo -n "include directory: "
	if [    -d /usr/local/include   ]
	then
		USR_INC=/usr/local/include
	else
		USR_INC=$SYS_INC
	fi
	echo $USR_INC
fi
# Find default USR_LIB if none was given
if [    -z $USR_LIB     ]
then
	echo -n "library directory: "
	if [    -d /usr/local/lib       ]
	then
		USR_LIB=/usr/local/lib
	else
		USR_LIB=$SYS_LIB
	fi
	echo $USR_LIB
fi
# Find default USR_BIN if none was given
if [    -z $USR_BIN     ]
then
	echo -n "target binary directory: "
	if [    -d /usr/local/bin       ]
	then
		USR_BIN=/usr/local/bin
	elif [  -d /usr/share/bin       ]
	then
		USR_BIN=/usr/share/bin
	elif [  -w $SYS_BIN     ]
	then
		USR_BIN=$SYS_BIN
	else
		USR_BIN=`pwd`
	fi
	echo $USR_BIN
elif ! [	-d $USR_BIN     ]
then
	echo "exiting: $USR_BIN is not a valid directory"
	exit 1
fi
if ! [  -w $USR_BIN     ]
then
	echo "$userid cannot write to $USR_BIN, set to `pwd`"
	USR_BIN=`pwd`
fi
# Find default man_dir if none was given
if [    -z $man_dir     ]
then
	echo -n "target man directory: "
	if [    -d /usr/local/man/man1       ]
	then
		man_dir="/usr/local/man/man1"
	elif [  -d /usr/share/man/man1       ]
	then
		man_dir="/usr/share/man/man1"
	elif [  -w /usr/man/man1     ]; then
		man_dir="/usr/man/man1"
	else
		man_dir=`pwd`
	fi
	echo $man_dir
elif ! [	-d $man_dir     ]
then
	echo "exiting: $man_dir is not a valid directory"
	exit 1
fi
if ! [  -w $man_dir     ]
then
	echo "$userid cannot write to $man_dir, set to `pwd`"
	man_dir=`pwd`
fi
#
# Are the necessary includes all there?
#
err=no
for inc in assert.h ctype.h errno.h fcntl.h limits.h math.h setjmp.h signal.h stdio.h stdlib.h string.h sys/resource.h sys/stat.h sys/time.h sys/times.h sys/types.h sys/wait.h time.h unistd.h
do
	if ! [  -f $SYS_INC/$inc	]
	then
		echo -n "$inc: "
		echo "not found"
		err=yes
	fi
done
if [    $err = yes      ]
then
	echo "exiting: not all include files found"
	exit 1
fi
#
# Generate top level makefile
#
echo "# $MAKEFILE generated on `date` for $userid." 1>$MAKEFILE
echo "SHELL=/bin/sh" 1>>$MAKEFILE
echo "PACKAGE_NAME=$PACKAGE" 1>>$MAKEFILE
echo "USR_BIN=$USR_BIN" 1>>$MAKEFILE
echo "USR_SRC=./source" 1>>$MAKEFILE
echo "USR_CHK=$USR_CHK" 1>>$MAKEFILE
echo "man_dir=$man_dir" 1>>$MAKEFILE
cat >>$MAKEFILE <<\_MAKE_EOF
all a68g::
	cd $(USR_SRC); $(MAKE) CPP_FLAGS="$(CPP_FLAGS)" CFLAGS="$(CFLAGS)" LD_FLAGS="$(LD_FLAGS)"; mv a68g ..; cd ..
# For OS/2 uncomment next lines
# a68g.exe:     a68g
#       emxbind -b $(USR_SRC)/a68g
install:	all
	install -m 755 -s a68g $(USR_BIN)
	install -m 644 doc/man1/a68g.1 $(man_dir)
uninstall:
	rm -f $(USR_BIN)/a68g $(man_dir)/a68g.1
depend:
	cd $(USR_SRC); $(MAKE) depend; cd ..
regression:  all
	cd $(USR_CHK); ./regression $(DIR); cd ..
clean:
	cd $(USR_SRC); $(MAKE) clean; cd ..
	for f in `find . -name "core" -print`; do rm -f $$f; done
distclean mostlyclean maintainer-clean: clean
	for f in `find . -name "makefile" -print`; do rm -f $$f; done
	rm -f a68g .a68g.log .a68g.tmp .a68g.x .a68g.x.l
dist:   distclean
	cd ..;tar -czf $(PACKAGE_NAME).tar.gz $(PACKAGE_NAME)
indent:
	cd $(USR_SRC); $(MAKE) indent; cd ..
TAGS info dvi:
	@echo "target not implemented"
_MAKE_EOF
echo "generated $MAKEFILE"
#
# Generate source level makefile
#
echo "# $BUILD_FILE generated on `date` for $userid." 1>$BUILD_FILE
echo "SHELL=/bin/sh" 1>>$BUILD_FILE
echo "USR_BIN=$USR_BIN" 1>>$BUILD_FILE
echo "USR_LIB=$USR_LIB" 1>>$BUILD_FILE
echo "USR_INC=$USR_INC" 1>>$BUILD_FILE
echo "CC=$cc" 1>>$BUILD_FILE
#
# Shared libraries are called .so (Linux etcetera) or .dylib (BSD).
#
# Find POSIX threads
if [    -z $threads     ]
then
	echo -n "checking POSIX threads in $SYS_LIB and $SYS_INC: "
	if [    -f $SYS_LIB/libpthread.so -a -f $SYS_INC/pthread.h ]
	then
		echo "found"
		echo "POSIX_THREADS_LIBS=-lpthread" 1>>$BUILD_FILE
		echo "POSIX_THREADS_FLAG=-DHAVE_POSIX_THREADS" 1>>$BUILD_FILE
	elif [    -f $SYS_LIB/libpthread.dylib -a -f $SYS_INC/pthread.h ]
	then
		echo "found"
		echo "POSIX_THREADS_LIBS=-lpthread" 1>>$BUILD_FILE
		echo "POSIX_THREADS_FLAG=-DHAVE_POSIX_THREADS" 1>>$BUILD_FILE
	else
		echo "not found"
	fi
else
	echo "not using POSIX threads; parallel clause will be disabled (specify --threads)"
fi
# Find GNU Plotutils
echo -n "checking GNU plotutils in $USR_LIB and $USR_INC: "
if [    -f $USR_LIB/libplot.so -a -f $USR_INC/plot.h ]
then
	echo "found"
	echo "PLOTUTILS_LIBS=-L/usr/X11R6/lib -lXaw -lXmu -lXt -lSM -lICE -lXext -lX11 -lplot" 1>>$BUILD_FILE
	echo "PLOTUTILS_FLAG=-DHAVE_PLOTUTILS" 1>>$BUILD_FILE
elif [    -f $USR_LIB/libplot.dylib -a -f $USR_INC/plot.h ]
then
	echo "found"
	echo "PLOTUTILS_LIBS=-L/usr/X11R6/lib -lXaw -lXmu -lXt -lSM -lICE -lXext -lX11 -lplot" 1>>$BUILD_FILE
	echo "PLOTUTILS_FLAG=-DHAVE_PLOTUTILS" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find GSL
echo -n "checking GNU scientific library in $USR_LIB: "
if [    -f $USR_LIB/libgsl.so -a -f $USR_LIB/libgslcblas.so ]
then
	echo "found"
	echo "GSL_LIBS=-lgsl -lgslcblas" 1>>$BUILD_FILE
	echo "GSL_FLAG=-DHAVE_GSL" 1>>$BUILD_FILE
elif [    -f $USR_LIB/libgsl.dylib -a -f $USR_LIB/libgslcblas.so ]
then
	echo "found"
	echo "GSL_LIBS=-lgsl -lgslcblas" 1>>$BUILD_FILE
	echo "GSL_FLAG=-DHAVE_GSL" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find curses
echo -n "checking curses in $SYS_LIB: "
if [    -f $SYS_LIB/libcurses.so ]
then
	echo "found"
	echo "CURSES_LIBS=-lcurses" 1>>$BUILD_FILE
	echo "CURSES_FLAG=-DHAVE_CURSES" 1>>$BUILD_FILE
elif [    -f $SYS_LIB/libcurses.dylib ]
then
	echo "found"
	echo "CURSES_LIBS=-lcurses" 1>>$BUILD_FILE
	echo "CURSES_FLAG=-DHAVE_CURSES" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find HTTP support
echo -n "checking HTTP support in $SYS_INC: "
if [    -f $SYS_INC/netdb.h -a -f $SYS_INC/arpa/inet.h -a -f $SYS_INC/netinet/in.h -a -f $SYS_INC/sys/socket.h	]
then
	echo "found"
	echo "HTTP_FLAG=-DHAVE_HTTP" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find regular expression support
echo -n "checking regular expression support in $SYS_INC: "
if [    -f $SYS_INC/regex.h	]
then
	echo "found"
	echo "REGEX_FLAG=-DHAVE_REGEX" 1>>$BUILD_FILE
else
	echo "not found"
fi
# Find IEEE-754 compatibility
echo -n "checking IEEE 754 floating point compatibility using system information: "
if [	-n POWERPC -o -n PPC -o -n X86	]
then
	echo "compatible"
	echo "IEEE_754_FLAG=-DHAVE_IEEE_754" 1>>$BUILD_FILE
else
	echo "unknown"
	echo -n "checking IEEE 754 floating point support in $SYS_INC: "
	if [    -f $SYS_INC/ieee754.h -o -f $SYS_INC/ieeefp.h -o -f $SYS_INC/machine/ieeefp.h   ]
	then
		echo "found"
		echo "IEEE_754_FLAG=-DHAVE_IEEE_754" 1>>$BUILD_FILE
	else
		echo "not found: if your platform is IEEE 754 compatible then build with 'make CFLAGS=HAVE_IEEE_754'"
	fi
fi
# Since we are executing a shell script, assume we are on UNIX or compatible.
echo "OS_FLAG=-DHAVE_UNIX" 1>>$BUILD_FILE
# Finish Makefile
if [    $cc = gcc       ]
then
	echo "STD_CFLAGS=$warn -I\$(USR_INC) $opt" 1>>$BUILD_FILE
	echo "STD_LD_FLAGS=$ld_opt -L\$(USR_LIB)" 1>>$BUILD_FILE
else
	echo "STD_CFLAGS=-I\$(USR_INC)" 1>>$BUILD_FILE
	echo "STD_LD_FLAGS=-L\$(USR_LIB)" 1>>$BUILD_FILE
fi
cat >>$BUILD_FILE <<\_BUILD_EOF
FLAGS=$(CPPFLAGS) $(STD_CFLAGS) $(POSIX_THREADS_FLAG) $(PLOTUTILS_FLAG) $(GSL_FLAG) $(CURSES_FLAG) $(OS_FLAG) $(IEEE_754_FLAG) $(HTTP_FLAG) $(REGEX_FLAG) $(CFLAGS)
HS=config.h algol68g.h environ.h genie.h gsl.h mp.h transput.h
OBJ=algol68g.o coercion.o complex.o diagnostics.o engine.o extensions.o garbage.o genie.o gsl.o http.o io.o listing.o moids.o monitor.o mp.o names.o options.o parallel.o parser.o plotutils.o prelude.o regex.o scanner.o scope.o signal.o standard.o stowed.o support.o taxes.o transput.o vector.o
all:    a68g
a68g:   $(OBJ)
	$(CC) $(OBJ) $(CFLAGS) $(STD_LD_FLAGS) $(POSIX_THREADS_LIBS) $(PLOTUTILS_LIBS) $(GSL_LIBS) $(CURSES_LIBS) -lm $(LD_FLAGS) -o a68g
$(OBJ): $(HS)
.c.o:
	$(CC) -c $(FLAGS) $<
clean:
	rm -f $(OBJ)
depend:
	touch $(HS)
indent: clean
	indent -l256 -br -ce -npsl *.c
	rm -f *.c~
	wc *.c *.h
_BUILD_EOF
echo "generated $BUILD_FILE"
#
# Make regression script
#
if [    -d $USR_CHK -a -w $USR_CHK      ]
then
	cat >$TEST_FILE <<\_REGRESSION_EOF
#! /bin/sh
if [	-n $1 ]
then
	cd ./$1
fi
if [    -f './a68g' ]
then
	A68='./a68g'
elif [  -f '../a68g' ]
then
	A68='../a68g'
else
	A68='a68g'
fi
#
uname -mrs
pwd
echo "number of test programs: `find . -name "*.a68" -print | wc -l`"
date
$A68 -version
case $?
in
	0) ;;
	*) echo "where is $A68?"; exit $? ;;
esac
#
date
for f in `find . -name "*.a68" -print | grep -v quote-stropping | sort`
do
	echo "$k $f" 1>&2
	echo "$k $f"
	$A68 -regression $f
done
for f in `find . -name "*.a68" -print | grep quote-stropping | sort`
do
	echo "$k $f" 1>&2
	echo "$k $f"
	$A68 -regression -quotestrop $f
done
date
ls -l
rm -v *.tmp .a68g.tmp
_REGRESSION_EOF
chmod +x $TEST_FILE
echo "generated $TEST_FILE"
fi
#
# Build target if required
#
if [    $build = yes    ]
then
	echo "building $PACKAGE"
	make a68g
	case $?
	in
		0)
			;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
	echo -n "checking whether $PACKAGE works: "
	./a68g -version >& /dev/null
	case $?
	in
		0)
			echo "ok" ;;
		*)
			echo "exiting: $?"
			exit 1 ;;
	esac
fi
# We're all set.
exit
