AC_INIT([algol68g], [2.3.0], [Marcel van der Veer <algol68g@xs4all.nl>])
#
# Algol 68 Genie "configure.ac" generated by "a68g-tools".
#

AC_PREREQ([2.60])

# A68G_AC_PROG_CC_CFLAGS($1)
# 
# Given string $1, check if the compiler supports the string as a
# command-line option. If it does, add the string to CFLAGS.

AC_DEFUN([A68G_AC_PROG_CC_CFLAGS], 
  [AC_MSG_CHECKING([whether $CC accepts $1])
  a68g_ac_save_CFLAGS=$CFLAGS
  CFLAGS="$a68g_ac_save_CFLAGS $1"
  _AC_COMPILE_IFELSE([AC_LANG_PROGRAM()], 
    AC_MSG_RESULT(yes), 
    [CFLAGS="$a68g_ac_save_CFLAGS"
    AC_MSG_RESULT(no)])
  ])

#
# Platform ids.
#

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

#
# Extra options.
#

AC_ARG_ENABLE(arch, [AS_HELP_STRING([--enable-arch=cpu], [if using gcc, enable emitting architecture-tuned assembly code (default is "no")])], , enable_arch=no) 
AC_ARG_ENABLE(compiler, [AS_HELP_STRING([--enable-compiler], [enable unit compiler (default is "yes")])], , enable_compiler=yes) 
AC_ARG_ENABLE(gsl, [AS_HELP_STRING([--enable-gsl], [if installed, enable GNU Scientific Library (default is "yes")])], , enable_gsl=yes) 
AC_ARG_ENABLE(parallel, [AS_HELP_STRING([--enable-parallel], [enable Algol 68 parallel-clause (default is "yes")])], , enable_parallel=yes) 
AC_ARG_ENABLE(pic, [AS_HELP_STRING([--enable-pic=option], [if using gcc, enable option to generate PIC (default is "-fPIC")])], , enable_pic="-fPIC") 
AC_ARG_ENABLE(plotutils, [AS_HELP_STRING([--enable-plotutils], [if installed, enable GNU plotting utilities (default is "yes")])], , enable_plotutils=yes) 
AC_ARG_ENABLE(postgresql, [AS_HELP_STRING([--enable-postgresql], [if installed, enable PostgreSQL (default is "yes")])], , enable_postgresql=yes) 

#
# Initialisation.
#

AM_INIT_AUTOMAKE([gnu])
AC_PREFIX_DEFAULT(/usr/local)
AC_CONFIG_SRCDIR([a68g.h])
AC_CONFIG_HEADERS([a68g-config.h])

case "$host" in
#
# Linux.
#
*86-*-gnu | *86_64-*-gnu | *86-*-linux* | *86_64-*-linux*) 
AC_DEFINE(HAVE_LINUX, 1, [Define this if LINUX was detected]) 
AC_DEFINE(HAVE_IEEE_754, 1, [Define this if IEEE_754 compliant]) 
a68g_ac_export=yes
;;
#
# MacOS X.
#
*86-*-*darwin* | *86_64-*-*darwin*) 
AC_DEFINE(HAVE_MAC_OS_X, 1, [Define this if DARWIN was detected]) 
AC_DEFINE(HAVE_IEEE_754, 1, [Define this if IEEE_754 compliant]) 
a68g_ac_export=yes
;;
#
# FreeBSD.
#
*86-*-freebsd* | *86_64-*-freebsd*) 
AC_DEFINE(HAVE_FREEBSD, 1, [Define this if FreeBSD was detected]) 
AC_DEFINE(HAVE_IEEE_754, 1, [Define this if IEEE_754 compliant]) 
a68g_ac_export=yes
;;
#
# NetBSD.
#
*86-*-freebsd* | *86_64-*-freebsd*) 
AC_DEFINE(HAVE_NETBSD, 1, [Define this if NetBSD was detected]) 
AC_DEFINE(HAVE_IEEE_754, 1, [Define this if IEEE_754 compliant]) 
a68g_ac_export=yes
;;
#
# OpenBSD.
#
*86-*-openbsd* | *86_64-*-openbsd*) 
AC_DEFINE(HAVE_OPENBSD, 1, [Define this if OpenBSD was detected]) 
AC_MSG_WARN([configuring interpreter-only on OpenBSD])
a68g_ac_export=no
;;
#
# Others, untested by me.
#
*-*-*)
AC_MSG_WARN([untested platform; configuring interpreter-only])
a68g_ac_export=no
;;
esac

#
# Checks for essential system programs.
#

AC_LANG(C)
AC_PROG_CC([gcc])

if test "x$GCC" = "xyes"; then
  AC_DEFINE(HAVE_GCC, 1, [Define this if GCC was detected]) 
  CFLAGS="-g"
  A68G_AC_PROG_CC_CFLAGS([-O2])
  A68G_AC_PROG_CC_CFLAGS([-Wall])
  A68G_AC_PROG_CC_CFLAGS([-Wextra])
  A68G_AC_PROG_CC_CFLAGS([-Wshadow])
#
# Test on gcc capabilities.
#
  if test "x$enable_compiler" = "xyes" && test "x$a68g_ac_export = xyes"; then
#
# Check -Wl,--export-dynamic, needed for creating shared objects.
#
# Check whether we can link to a particular function, not just whether we can link.
# In fact, we must actually check that the resulting program runs.
#
    a68g_ac_arg="-Wl,--export-dynamic"
    AC_MSG_CHECKING([if $CC accepts $a68g_ac_arg])
    a68g_ac_save_LDFLAGS=$LDFLAGS
    LDFLAGS="$a68g_ac_save_LDFLAGS $a68g_ac_arg"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([extern void exit (); void (*fptr) () = exit;],[])],
      [AC_MSG_RESULT(yes)
       AC_DEFINE(HAVE_EXPORT_DYNAMIC, 1, [Define this if EXPORT_DYNAMIC is recognised]) 
      ],
      [AC_MSG_RESULT(no)
       AC_MSG_WARN([--export-dynamic is not accepted; configuring interpreter-only])
       a68g_ac_export=no
      ],
      [AC_MSG_RESULT(assuming no)
       AC_MSG_WARN([--export-dynamic is not accepted; configuring interpreter-only])
       a68g_ac_export=no
      ]
    )
    LDFLAGS=$a68g_ac_save_LDFLAGS
  fi
  AM_CONDITIONAL([EXPORT_DYNAMIC], [test x$a68g_ac_export = xyes])
#
# Optionally, tune for a specific processor.
#
  if test "x$enable_arch" != "xno"; then
    AC_MSG_CHECKING([whether $CC accepts -march=$enable_arch])
    a68g_ac_save_CFLAGS=$CFLAGS
    a68g_ac_march="-march=$enable_arch"
    CFLAGS="$a68g_ac_save_CFLAGS $a68g_ac_march"
    _AC_COMPILE_IFELSE([AC_LANG_PROGRAM()], 
      [AC_MSG_RESULT(yes)
       AC_DEFINE_UNQUOTED(HAVE_TUNING, "$a68g_ac_march", [Define this if user wants to tune for a specific CPU]) 
      ], 
      [AC_MSG_RESULT(no)
       AC_MSG_WARN([your CPU name is not accepted; resetting to default])
       CFLAGS="$a68g_ac_save_CFLAGS"
      ]
    )
  fi
#
# Some platforms want another or no PIC option.
#
  if test "x$enable_pic" != "xno"; then
    AC_MSG_CHECKING([whether $CC accepts $enable_pic])
    a68g_ac_save_CFLAGS=$CFLAGS
    CFLAGS="$a68g_ac_save_CFLAGS $enable_pic"
    _AC_COMPILE_IFELSE([AC_LANG_PROGRAM()], 
      [AC_MSG_RESULT(yes)
       AC_DEFINE_UNQUOTED(HAVE_PIC, "$enable_pic", [Define this as PIC option]) 
      ], 
      [AC_MSG_RESULT(no)
       AC_MSG_WARN([your PIC option is not accepted; configuring interpreter-only])
      ]
    )
    CFLAGS="$a68g_ac_save_CFLAGS"
  fi
else
  AC_MSG_WARN([gcc is the preferred C compiler; configuring interpreter-only])
fi

AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_YACC
AM_PROG_LEX

#
# Checks for compiler characteristics.
#

AC_C_CHAR_UNSIGNED
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT16_T

#
# Extra include directories.
#

if test -d /usr/local/pgsql/include
then
AC_DEFINE(HAVE_USR_LOCAL_PGSQL_INCLUDE, 1, [Define this if /usr/local/pgsql/include was detected]) 
CFLAGS="$CFLAGS -I/usr/local/pgsql/include"
CPPFLAGS="$CPPFLAGS -I/usr/local/pgsql/include"
CXXFLAGS="$CXXFLAGS -I/usr/local/pgsql/include"
LDFLAGS="$LDFLAGS -L/usr/local/pgsql/lib"
fi

if test -d /usr/pkg/pgsql/include
then
AC_DEFINE(HAVE_USR_PKG_PGSQL_INCLUDE, 1, [Define this if /usr/pkg/pgsql/include was detected]) 
CFLAGS="$CFLAGS -I/usr/pkg/pgsql/include"
CPPFLAGS="$CPPFLAGS -I/usr/pkg/pgsql/include"
CXXFLAGS="$CXXFLAGS -I/usr/pkg/pgsql/include"
LDFLAGS="$LDFLAGS -L/usr/pkg/pgsql/lib"
fi

if test -d /opt/local/pgsql/include
then
AC_DEFINE(HAVE_OPT_LOCAL_PGSQL_INCLUDE, 1, [Define this if /opt/local/pgsql/include was detected]) 
CFLAGS="$CFLAGS -I/opt/local/pgsql/include"
CPPFLAGS="$CPPFLAGS -I/opt/local/pgsql/include"
CXXFLAGS="$CXXFLAGS -I/opt/local/pgsql/include"
LDFLAGS="$LDFLAGS -L/opt/local/pgsql/lib"
fi

#
# Checks on optional functionality.
#

if test "x$enable_compiler" = "xyes"; then
AC_CHECK_HEADERS([dlfcn.h])
AC_CHECK_LIB([dl], [dlopen])
fi

AC_CHECK_HEADERS([math.h])
AC_CHECK_LIB([m], [cos])

if test "x$enable_gsl" = "xyes"; then
AC_CHECK_HEADERS([gsl/gsl_blas.h gsl/gsl_complex.h gsl/gsl_complex_math.h gsl/gsl_errno.h gsl/gsl_fft_complex.h gsl/gsl_integration.h gsl/gsl_linalg.h gsl/gsl_math.h gsl/gsl_matrix.h gsl/gsl_permutation.h gsl/gsl_sf.h gsl/gsl_vector.h])
AC_CHECK_LIB([gslcblas], [cblas_dgemm])
AC_CHECK_LIB([gsl], [gsl_blas_dgemm])
fi

if test "x$enable_parallel" = "xyes"; then
AC_CHECK_HEADERS([pthread.h])
AC_CHECK_LIB([pthread], [pthread_self])
fi

if test "x$enable_plotutils" = "xyes"; then
AC_CHECK_HEADERS([plot.h])
AC_CHECK_LIB([plot], [pl_openpl_r])
fi

if test "x$enable_postgresql" = "xyes"; then
AC_CHECK_HEADERS([libpq-fe.h])
AC_CHECK_LIB([pq], [PQconnectdb])
fi

#
# Checks for libraries.
#

AC_CHECK_LIB([ncurses], [initscr])
AC_CHECK_LIB([termcap], [tgetnum])

#
# Checks for header files.
#

AC_CHECK_HEADERS([curses.h dirent.h netdb.h netinet/in.h regex.h sys/socket.h term.h])

#
# Epilogue for the configuration file a68g-config.h.
#

AH_BOTTOM([/* In case of incomplete GSL installation - tant pis */
#if ! defined  HAVE_LIBGSLCBLAS
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_BLAS_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_COMPLEX_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_COMPLEX_MATH_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_ERRNO_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_FFT_COMPLEX_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_INTEGRATION_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_LINALG_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_MATH_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_MATRIX_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_PERMUTATION_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_SF_H
#undef HAVE_LIBGSL
#endif

#if ! defined  HAVE_GSL_GSL_VECTOR_H
#undef HAVE_LIBGSL
#endif])

AH_BOTTOM([/* Do we have a compiler? */
#if (! defined HAVE_GCC || defined NO_MINUS_C_MINUS_O || ! defined HAVE_DLFCN_H)
#undef HAVE_COMPILER
#elif ! defined HAVE_EXPORT_DYNAMIC
#undef HAVE_COMPILER
#elif ((defined HAVE_LINUX || defined HAVE_MAC_OS_X) && defined HAVE_LIBDL)
#define HAVE_COMPILER 1
#elif (defined HAVE_FREEBSD || defined HAVE_NETBSD)
#define HAVE_COMPILER 1
#else
#undef HAVE_COMPILER
#endif])

AH_BOTTOM([/* Can we access the internet? */
#if (defined HAVE_NETDB_H && defined HAVE_NETINET_IN_H && defined HAVE_SYS_SOCKET_H)
#define HAVE_HTTP
#endif])

#
# Generate files.
#

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
