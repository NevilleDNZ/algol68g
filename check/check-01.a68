PR echo "[1] Peano curve using Van Wijngaarden's algorithm" PR

PROC go 1 = (INT n) VOID:
     IF n ~= 0
     THEN go 2 (n - 1);
          plot (x + d, y);
          go 1 (n - 1);
          plot (x, y + d);
          go 1 (n - 1);
          plot (x - d, y);
          go 4 (n - 1)
     FI;

PROC go 2 = (INT n) VOID:
     IF n~= 0
     THEN go 1 (n - 1);
          plot (x, y + d);
          go 2 (n - 1);
          plot (x + d, y);
          go 2 (n - 1);
          plot (x, y - d);
          go 3 (n - 1)
     FI;


PROC go 3 = (INT n) VOID:
     IF n~= 0
     THEN go 4 (n - 1);
          plot (x - d, y);
          go 3 (n - 1);
          plot (x, y - d);
          go 3 (n - 1);
          plot (x + d, y);
          go 2 (n - 1)
     FI;

PROC go 4 = (INT n) VOID:
     IF n~= 0
     THEN go 3 (n - 1);
          plot (x, y - d);
          go 4 (n - 1);
          plot (x - d, y);
          go 4 (n - 1);
          plot (x, y + d);
          go 1 (n - 1)
     FI;

PROC plot = (REAL x n, y n) VOID:
     BEGIN INT j x = 1 + ENTIER (x * (n x - 1)), j y = 1 + ENTIER (y * (n y - 1)),
               k x = 1 + ENTIER (x n * (n x - 1)), k y = 1 + ENTIER (y n * (n y - 1));
           IF j x = k x
           THEN INT m = (j y < k y | j y | k y),
                    n = (j y > k y | j y | k y);
                FOR l FROM m TO n
                DO p [k x, l] := "."
                OD
           ELSE INT m = (j x < k x | j x | k x),
                    n = (j x > k x | j x | k x);
                FOR l FROM m TO n
                DO p [l, k y] := "."
                OD
           FI;
           x := x n;
           y := y n
     END;

INT n x = 60, n y = 35;
[1 : n x, 1 : n y] CHAR p;
FOR i TO n x
DO FOR j TO n y
   DO p [i, j] := " "
   OD
OD;

INT n = 4;
REAL d = 2.0 ** (- n);
REAL x := d / 2, y := d / 2;
go 1 (n);

FOR i TO n y
DO FOR j TO n x
   DO print (p [j, i])
   OD;
   print (new line)
OD



