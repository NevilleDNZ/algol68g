# This program is part of the Revised Mathematisch Centrum Algol 68 Test Set
  by Dick Grune [1979].

  This program is distributed with Algol 68 Genie with
  kind permission of Dick Grune.'

  These test sets are available from:
     www.dickgrune.com/CS/Algol68
  or from the Vrije Universiteit Amsterdam:
     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #

  PR quiet PR

#appl11#
COMMENT This is the intended program
BEGIN # ALGOL 68 program TJD730702.
        This program tests some operator calculus and print the same
        results as the ALGOL 68 program TJD730701, viz.,
        a difference table of a 4-th degree polynomial. #
  MODE FUN = PROC(INT)INT;
  OPERATOR nabla = (FUN t)FUN :
  (INT x)INT : t (x)- t (x-1);
  MODE OPERATOR = PROC(FUN)FUN;
  OP UP = (OPERATOR a, INT b)OPERATOR :
  (FUN f) FUN :
      IF b=0 THEN f
      ELSE a ( (a UP (b-1)) (f)) FI;
  PRIO MIN = 1;
  OP MIN = (INT a, b)INT : (a<=b | a | b);
  FUN pol4 = (INT x)INT : x*(x+1)*(x+2)*(x+3);
  FOR n FROM 0 TO 20
  DO
    print(n);
    FOR k FROM 0 TO (n-1) MIN 5
    DO
      print((nabla UP k) (pol4) (n))
    OD;
    print(newline)
  OD
END
COMMENT # end of intended program #
BEGIN # Attempt at partial parametrization #
  # A / between ## separates the partial params from the direct ones #
  MODE FUN = UNION(PROC(INT)INT, FUNINTINT);
  MODE FUNINTINT = # caused by nabla #
    STRUCT(PROC(FUN, # / # INT)INT f, REF FUN p);
  OP FUN2INT = (FUN f, INT i)INT :
  CASE f IN
    (PROC(INT)INT pf) : pf(i),
    (FUNINTINT f) : (f OF f)(p OF f, i)
  ESAC;
  OPERATOR nabla = (FUN t)FUN :
  FUNINTINT # cast for scope-violating object #
  ( (FUN t, INT x)INT : t FUN2INT (x)- t FUN2INT (x-1),
       HEAP FUN:= t);
  MODE OPERATOR = UNION(PROC(FUN)FUN, OPINTFUN);
  MODE OPINTFUN = # caused by UP #
    STRUCT( PROC(OPERATOR, INT, # / # FUN) FUN f,
      REF OPERATOR p1, REF INT p2);
  OP OP2FUN = (OPERATOR op, FUN f) FUN :
  CASE op IN
    (PROC(FUN)FUN pf) : pf(f),
    (OPINTFUN op) : (f OF op)(p1 OF op, p2 OF op, f)
  ESAC;
  OP UP = (OPERATOR a, INT b)OPERATOR :
  OPINTFUN # cast for scope-violating object #
  ( (OPERATOR a, INT b, # / # FUN f) FUN :
      IF b=0 THEN f
      ELSE a OP2FUN ( (a UP (b-1)) OP2FUN (f)) FI,
    HEAP OPERATOR:= a, HEAP INT:= b);
  PRIO MIN = 1;
  PRIO FUN2INT = 9;
  PRIO OP2FUN = 9;
  OP MIN = (INT a, b)INT : (a<=b | a | b);
  FUN pol4 = (INT x)INT : x*(x+1)*(x+2)*(x+3);
  FOR n FROM 0 TO 20
  DO
    print(n);
    FOR k FROM 0 TO (n-1) MIN 5
    DO
      print((nabla UP k) OP2FUN (pol4) FUN2INT (n))
    OD;
    print(newline)
  OD
END
