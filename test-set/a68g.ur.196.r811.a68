# This program is part of the Rennes Test Set, 
  automatically generated from the Algol 68 grammar 
  using a formalism of B. Houssais (University of Rennes, 1975).
 
  This test set is available from:
     www.dickgrune.com/CS/Algol68
  or from the Vrije Universiteit Amsterdam:
     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #

PR quiet PR

# r811 #
(print (("integral denotations", newline));
 INT vf = 258;
 
 INT ctr := 0;
 
 PROC e = (INT a, b) VOID:
      (a = b | ctr +:= 1 | print (("er int", a, b, newline)));
 
 e (1 + 255, 256);
 e (1 + 256, 257);
 e (1 + 4095, 4096);
 e (1 + 10000, 10001);
 e (1 + 32768, 32769);
 e (1 - 255, -254);
 e (1 - 256, -255);
 e (1 - 4095, -4094);
 e (1 - 10000, -9999);
 e (1 - 32768, -32767);
 e (1 * 255, 255);
 e (1 * 256, 256);
 e (1 * 4095, 4095);
 e (1 * 10000, 10000);
 e (1 * 32768, 32768);
 e (0 + 255, 255);
 e (0 + 256, 256);
 e (0 + 4095, 4095);
 e (0 + 10000, 10000);
 e (0 + 32768, 32768);
 e (0 - 255, -255);
 e (0 - 256, -256);
 e (0 - 4095, -4095);
 e (0 - 10000, -10000);
 e (0 - 32768, -32768);
 e (0 * 255, 0);
 e (0 * 256, 0);
 e (0 * 4095, 0);
 e (0 * 10000, 0);
 e (0 * 32768, 0);
 e (0000 + 255, 255);
 e (0000 + 256, 256);
 e (0000 + 4095, 4095);
 e (0000 + 10000, 10000);
 e (0000 + 32768, 32768);
 e (0000 - 255, -255);
 e (0000 - 256, -256);
 e (0000 - 4095, -4095);
 e (0000 - 10000, -10000);
 e (0000 - 32768, -32768);
 e (0000 * 255, 0);
 e (0000 * 256, 0);
 e (0000 * 4095, 0);
 e (0000 * 10000, 0);
 e (0000 * 32768, 0);
 e (4 + 255, 259);
 e (4 + 256, 260);
 e (4 + 4095, 4099);
 e (4 + 10000, 10004);
 e (4 + 32768, 32772);
 e (4 - 255, -251);
 e (4 - 256, -252);
 e (4 - 4095, -4091);
 e (4 - 10000, -9996);
 e (4 - 32768, -32764);
 e (4 * 255, 1020);
 e (4 * 256, 1024);
 e (4 * 4095, 16380);
 e (4 * 10000, 40000);
 e (4 * 32768, 131072);
 e (10 + 255, 265);
 e (10 + 256, 266);
 e (10 + 4095, 4105);
 e (10 + 10000, 10010);
 e (10 + 32768, 32778);
 e (10 - 255, -245);
 e (10 - 256, -246);
 e (10 - 4095, -4085);
 e (10 - 10000, -9990);
 e (10 - 32768, -32758);
 e (10 * 255, 2550);
 e (10 * 256, 2560);
 e (10 * 4095, 40950);
 e (10 * 10000, 100000);
 e (10 * 32768, 327680);
 e (16 + 255, 271);
 e (16 + 256, 272);
 e (16 + 4095, 4111);
 e (16 + 10000, 10016);
 e (16 + 32768, 32784);
 e (16 - 255, -239);
 e (16 - 256, -240);
 e (16 - 4095, -4079);
 e (16 - 10000, -9984);
 e (16 - 32768, -32752);
 e (16 * 255, 4080);
 e (16 * 256, 4096);
 e (16 * 4095, 65520);
 e (16 * 10000, 160000);
 e (16 * 32768, 524288);
 e (64 + 255, 319);
 e (64 + 256, 320);
 e (64 + 4095, 4159);
 e (64 + 10000, 10064);
 e (64 + 32768, 32832);
 e (64 - 255, -191);
 e (64 - 256, -192);
 e (64 - 4095, -4031);
 e (64 - 10000, -9936);
 e (64 - 32768, -32704);
 e (64 * 255, 16320);
 e (64 * 256, 16384);
 e (64 * 4095, 262080);
 e (64 * 10000, 640000);
 e (64 * 32768, 2097152);
 e (00011 + 255, 266);
 e (00011 + 256, 267);
 e (00011 + 4095, 4106);
 e (00011 + 10000, 10011);
 e (00011 + 32768, 32779);
 e (00011 - 255, -244);
 e (00011 - 256, -245);
 e (00011 - 4095, -4084);
 e (00011 - 10000, -9989);
 e (00011 - 32768, -32757);
 e (00011 * 255, 2805);
 e (00011 * 256, 2816);
 e (00011 * 4095, 45045);
 e (00011 * 10000, 110000);
 e (00011 * 32768, 360448);
 e (255 + 1, 256);
 e (255 + 0, 255);
 e (255 + 0000, 255);
 e (255 + 4, 259);
 e (255 + 10, 265);
 e (255 + 16, 271);
 e (255 + 64, 319);
 e (255 + 00011, 266);
 e (255 - 1, 254);
 e (255 - 0, 255);
 e (255 - 0000, 255);
 e (255 - 4, 251);
 e (255 - 10, 245);
 e (255 - 16, 239);
 e (255 - 64, 191);
 e (255 - 00011, 244);
 e (255 * 1, 255);
 e (255 * 0, 0);
 e (255 * 0000, 0);
 e (255 * 4, 1020);
 e (255 * 10, 2550);
 e (255 * 16, 4080);
 e (255 * 64, 16320);
 e (255 * 00011, 2805);
 e (256 + 1, 257);
 e (256 + 0, 256);
 e (256 + 0000, 256);
 e (256 + 4, 260);
 e (256 + 10, 266);
 e (256 + 16, 272);
 e (256 + 64, 320);
 e (256 + 00011, 267);
 e (256 - 1, 255);
 e (256 - 0, 256);
 e (256 - 0000, 256);
 e (256 - 4, 252);
 e (256 - 10, 246);
 e (256 - 16, 240);
 e (256 - 64, 192);
 e (256 - 00011, 245);
 e (256 * 1, 256);
 e (256 * 0, 0);
 e (256 * 0000, 0);
 e (256 * 4, 1024);
 e (256 * 10, 2560);
 e (256 * 16, 4096);
 e (256 * 64, 16384);
 e (256 * 00011, 2816);
 e (4095 + 1, 4096);
 e (4095 + 0, 4095);
 e (4095 + 0000, 4095);
 e (4095 + 4, 4099);
 e (4095 + 10, 4105);
 e (4095 + 16, 4111);
 e (4095 + 64, 4159);
 e (4095 + 00011, 4106);
 e (4095 - 1, 4094);
 e (4095 - 0, 4095);
 e (4095 - 0000, 4095);
 e (4095 - 4, 4091);
 e (4095 - 10, 4085);
 e (4095 - 16, 4079);
 e (4095 - 64, 4031);
 e (4095 - 00011, 4084);
 e (4095 * 1, 4095);
 e (4095 * 0, 0);
 e (4095 * 0000, 0);
 e (4095 * 4, 16380);
 e (4095 * 10, 40950);
 e (4095 * 16, 65520);
 e (4095 * 64, 262080);
 e (4095 * 00011, 45045);
 e (10000 + 1, 10001);
 e (10000 + 0, 10000);
 e (10000 + 0000, 10000);
 e (10000 + 4, 10004);
 e (10000 + 10, 10010);
 e (10000 + 16, 10016);
 e (10000 + 64, 10064);
 e (10000 + 00011, 10011);
 e (10000 - 1, 9999);
 e (10000 - 0, 10000);
 e (10000 - 0000, 10000);
 e (10000 - 4, 9996);
 e (10000 - 10, 9990);
 e (10000 - 16, 9984);
 e (10000 - 64, 9936);
 e (10000 - 00011, 9989);
 e (10000 * 1, 10000);
 e (10000 * 0, 0);
 e (10000 * 0000, 0);
 e (10000 * 4, 40000);
 e (10000 * 10, 100000);
 e (10000 * 16, 160000);
 e (10000 * 64, 640000);
 e (10000 * 00011, 110000);
 e (32768 + 1, 32769);
 e (32768 + 0, 32768);
 e (32768 + 0000, 32768);
 e (32768 + 4, 32772);
 e (32768 + 10, 32778);
 e (32768 + 16, 32784);
 e (32768 + 64, 32832);
 e (32768 + 00011, 32779);
 e (32768 - 1, 32767);
 e (32768 - 0, 32768);
 e (32768 - 0000, 32768);
 e (32768 - 4, 32764);
 e (32768 - 10, 32758);
 e (32768 - 16, 32752);
 e (32768 - 64, 32704);
 e (32768 - 00011, 32757);
 e (32768 * 1, 32768);
 e (32768 * 0, 0);
 e (32768 * 0000, 0);
 e (32768 * 4, 131072);
 e (32768 * 10, 327680);
 e (32768 * 16, 524288);
 e (32768 * 64, 2097152);
 e (32768 * 00011, 360448);
 e (1 + 131001, 131002);
 e (1 + 1000000000, 1000000001);
 e (1 + 2147483646, 2147483647);
 e (1 - 131001, -131000);
 e (1 - 1000000000, -999999999);
 e (1 - 2147483646, -2147483645);
 e (1 * 131001, 131001);
 e (1 * 1000000000, 1000000000);
 e (1 * 2147483646, 2147483646);
 e (131001 + 1, 131002);
 e (131001 - 1, 131000);
 e (131001 * 1, 131001);
 e (1000000000 + 1, 1000000001);
 e (1000000000 - 1, 999999999);
 e (1000000000 * 1, 1000000000);
 e (2147483646 + 1, 2147483647);
 e (2147483646 - 1, 2147483645);
 e (2147483646 * 1, 2147483646);
 print ((ctr, " tests ", (ctr = vf | "ok" | "error"))))