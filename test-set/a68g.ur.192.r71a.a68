# This program is part of the Rennes Test Set, 
  automatically generated from the Algol 68 grammar 
  using a formalism of B. Houssais (University of Rennes, 1975).
 
  This test set is available from:
     www.dickgrune.com/CS/Algol68
  or from the Vrije Universiteit Amsterdam:
     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #

PR quiet PR

# r71a #
BEGIN print (("independance of operators in the same range", newline));
      #   controle   # INT vf = 110;
      
      INT ctr := 0;
      
      [1 : vf] BOOL tc;
      
      FOR i TO vf 
      DO tc[i] := TRUE
      OD;
      PROC pos = (INT i) BOOL:
           (tc[i] | ctr +:= 1; tc[i] := FALSE | print (("er.1", i, newline)); SKIP);
      
      #   declarations de servitude   #
      MODE M = STRUCT (CHAR e1, REF M e2);
      
      M vm = ("#", NIL);
      
      OP - = (REAL a) PROC (INT, INT) INT: SKIP,
      PROC PROC (REAL, INT) VOID var := PROC (REAL, INT) VOID:
      (REAL a, INT b) VOID: HEAP INT,
      OP - = (INT par) BOOL: pos (1),
      OP - = (M par) BOOL: pos (2),
      OP - = (PROC (INT, REAL) INT par) BOOL: pos (3),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) par) BOOL: pos (4),
      OP - = (PROC STRUCT (INT x, y) par) BOOL: pos (5),
      OP - = (PROC (INT, INT) INT par) BOOL: pos (6),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) par) BOOL: pos (7),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) par) BOOL: pos (8),
      OP - = ([, , ] [] BOOL par) BOOL: pos (9),
      OP - = ([, , ] BITS par) BOOL: pos (10),
      OP - = (INT p1, INT p2) BOOL: pos (11),
      OP - = (INT p1, M p2) BOOL: pos (12),
      OP - = (INT p1, PROC (INT, REAL) INT p2) BOOL: pos (13),
      OP - = (INT p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (14),
      OP - = (INT p1, PROC STRUCT (INT x, y) p2) BOOL: pos (15),
      OP - = (INT p1, PROC (INT, INT) INT p2) BOOL: pos (16),
      OP - = (INT p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (17),
      OP - = (INT p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (18),
      OP - = (INT p1, [, , ] [] BOOL p2) BOOL: pos (19),
      OP - = (INT p1, [, , ] BITS p2) BOOL: pos (20),
      OP - = (M p1, INT p2) BOOL: pos (21),
      OP - = (M p1, M p2) BOOL: pos (22),
      OP - = (M p1, PROC (INT, REAL) INT p2) BOOL: pos (23),
      OP - = (M p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (24),
      OP - = (M p1, PROC STRUCT (INT x, y) p2) BOOL: pos (25),
      OP - = (M p1, PROC (INT, INT) INT p2) BOOL: pos (26),
      OP - = (M p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (27),
      OP - = (M p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (28),
      OP - = (M p1, [, , ] [] BOOL p2) BOOL: pos (29),
      OP - = (M p1, [, , ] BITS p2) BOOL: pos (30),
      OP - = (PROC (INT, REAL) INT p1, INT p2) BOOL: pos (31),
      OP - = (PROC (INT, REAL) INT p1, M p2) BOOL: pos (32),
      OP - = (PROC (INT, REAL) INT p1, PROC (INT, REAL) INT p2) BOOL: pos (33),
      OP - = (PROC (INT, REAL) INT p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (34),
      OP - = (PROC (INT, REAL) INT p1, PROC STRUCT (INT x, y) p2) BOOL: pos (35),
      OP - = (PROC (INT, REAL) INT p1, PROC (INT, INT) INT p2) BOOL: pos (36),
      OP - = (PROC (INT, REAL) INT p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (37),
      OP - = (PROC (INT, REAL) INT p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (38),
      OP - = (PROC (INT, REAL) INT p1, [, , ] [] BOOL p2) BOOL: pos (39),
      OP - = (PROC (INT, REAL) INT p1, [, , ] BITS p2) BOOL: pos (40),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, INT p2) BOOL: pos (41),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, M p2) BOOL: pos (42),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, PROC (INT, REAL) INT p2) BOOL: pos (43),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (44),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, PROC STRUCT (INT x, y) p2) BOOL: pos (45),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, PROC (INT, INT) INT p2) BOOL: pos (46),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (47),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (48),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, [, , ] [] BOOL p2) BOOL: pos (49),
      OP - = (STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p1, [, , ] BITS p2) BOOL: pos (50),
      OP - = (PROC STRUCT (INT x, y) p1, INT p2) BOOL: pos (51),
      OP - = (PROC STRUCT (INT x, y) p1, M p2) BOOL: pos (52),
      OP - = (PROC STRUCT (INT x, y) p1, PROC (INT, REAL) INT p2) BOOL: pos (53),
      OP - = (PROC STRUCT (INT x, y) p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (54),
      OP - = (PROC STRUCT (INT x, y) p1, PROC STRUCT (INT x, y) p2) BOOL: pos (55),
      OP - = (PROC STRUCT (INT x, y) p1, PROC (INT, INT) INT p2) BOOL: pos (56),
      OP - = (PROC STRUCT (INT x, y) p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (57),
      OP - = (PROC STRUCT (INT x, y) p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (58),
      OP - = (PROC STRUCT (INT x, y) p1, [, , ] [] BOOL p2) BOOL: pos (59),
      OP - = (PROC STRUCT (INT x, y) p1, [, , ] BITS p2) BOOL: pos (60),
      OP - = (PROC (INT, INT) INT p1, INT p2) BOOL: pos (61),
      OP - = (PROC (INT, INT) INT p1, M p2) BOOL: pos (62),
      OP - = (PROC (INT, INT) INT p1, PROC (INT, REAL) INT p2) BOOL: pos (63),
      OP - = (PROC (INT, INT) INT p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (64),
      OP - = (PROC (INT, INT) INT p1, PROC STRUCT (INT x, y) p2) BOOL: pos (65),
      OP - = (PROC (INT, INT) INT p1, PROC (INT, INT) INT p2) BOOL: pos (66),
      OP - = (PROC (INT, INT) INT p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (67),
      OP - = (PROC (INT, INT) INT p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (68),
      OP - = (PROC (INT, INT) INT p1, [, , ] [] BOOL p2) BOOL: pos (69),
      OP - = (PROC (INT, INT) INT p1, [, , ] BITS p2) BOOL: pos (70),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, INT p2) BOOL: pos (71),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, M p2) BOOL: pos (72),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, PROC (INT, REAL) INT p2) BOOL: pos (73),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (74),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, PROC STRUCT (INT x, y) p2) BOOL: pos (75),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, PROC (INT, INT) INT p2) BOOL: pos (76),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (77),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (78),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, [, , ] [] BOOL p2) BOOL: pos (79),
      OP - = (REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p1, [, , ] BITS p2) BOOL: pos (80),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, INT p2) BOOL: pos (81),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, M p2) BOOL: pos (82),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, PROC (INT, REAL) INT p2) BOOL: pos (83),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (84),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, PROC STRUCT (INT x, y) p2) BOOL: pos (85),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, PROC (INT, INT) INT p2) BOOL: pos (86),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (87),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (88),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, [, , ] [] BOOL p2) BOOL: pos (89),
      OP - = (UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p1, [, , ] BITS p2) BOOL: pos (90),
      OP - = ([, , ] [] BOOL p1, INT p2) BOOL: pos (91),
      OP - = ([, , ] [] BOOL p1, M p2) BOOL: pos (92),
      OP - = ([, , ] [] BOOL p1, PROC (INT, REAL) INT p2) BOOL: pos (93),
      OP - = ([, , ] [] BOOL p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (94),
      OP - = ([, , ] [] BOOL p1, PROC STRUCT (INT x, y) p2) BOOL: pos (95),
      OP - = ([, , ] [] BOOL p1, PROC (INT, INT) INT p2) BOOL: pos (96),
      OP - = ([, , ] [] BOOL p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (97),
      OP - = ([, , ] [] BOOL p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (98),
      OP - = ([, , ] [] BOOL p1, [, , ] [] BOOL p2) BOOL: pos (99),
      OP - = ([, , ] [] BOOL p1, [, , ] BITS p2) BOOL: pos (100),
      OP - = ([, , ] BITS p1, INT p2) BOOL: pos (101),
      OP - = ([, , ] BITS p1, M p2) BOOL: pos (102),
      OP - = ([, , ] BITS p1, PROC (INT, REAL) INT p2) BOOL: pos (103),
      OP - = ([, , ] BITS p1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) p2) BOOL: pos (104),
      OP - = ([, , ] BITS p1, PROC STRUCT (INT x, y) p2) BOOL: pos (105),
      OP - = ([, , ] BITS p1, PROC (INT, INT) INT p2) BOOL: pos (106),
      OP - = ([, , ] BITS p1, REF UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) p2) BOOL: pos (107),
      OP - = ([, , ] BITS p1, UNION (PROC (INT, REAL) VOID, PROC (REAL, INT) VOID) p2) BOOL: pos (108),
      OP - = ([, , ] BITS p1, [, , ] [] BOOL p2) BOOL: pos (109),
      OP - = ([, , ] BITS p1, [, , ] BITS p2) BOOL: pos (110),
      BOOL b = FALSE;
      
      (-0000, -vm, -(PROC p = (INT a, REAL b) INT: 0;
                     
                     p), -STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), -(STRUCT (INT x, y):
       (1, 2)), --0.1, -LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), -(LOC REF PROC PROC (REAL, INT) VOID := var), -BEGIN [, , ] [] BOOL tb = 4r1230321;
                                                          
                                                          tb
       END, -IF [1, 1, 1] BITS tb;
                
                b
       THEN tb
       ELSE 8r0
       FI, 0000 - 0000, 0000 - vm, 0000 - (PROC p = (INT a, REAL b) INT: 0;
                                           
                                           p), 0000 - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), 0000 - (STRUCT (INT x, y):
       (1, 2)), 0000 - -0.1, 0000 - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), 0000 - (LOC REF PROC PROC (REAL, INT) VOID := var), 0000 - BEGIN [, , ] [] BOOL tb = 4r1230321;
          
          tb
       END, 0000 - IF [1, 1, 1] BITS tb;
                      
                      b
       THEN tb
       ELSE 8r0
       FI, vm - 0000, vm - vm, vm - (PROC p = (INT a, REAL b) INT: 0;
                                     
                                     p), vm - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), vm - (STRUCT (INT x, y):
       (1, 2)), vm - -0.1, vm - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), vm - (LOC REF PROC PROC (REAL, INT) VOID := var), vm - BEGIN [, , ] [] BOOL tb = 4r1230321;
  
  tb
       END, vm - IF [1, 1, 1] BITS tb;
                    
                    b
       THEN tb
       ELSE 8r0
       FI, (PROC p = (INT a, REAL b) INT: 0;
            
            p) - 0000, (PROC p = (INT a, REAL b) INT: 0;
                        
                        p) - vm, (PROC p = (INT a, REAL b) INT: 0;
                                  
                                  p) - (PROC p = (INT a, REAL b) INT: 0;
                                        
                                        p), (PROC p = (INT a, REAL b) INT: 0;
                                             
                                             p) - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), (PROC p = (INT a, REAL b) INT: 0;
                                      
                                      p) - (STRUCT (INT x, y):
       (1, 2)), (PROC p = (INT a, REAL b) INT: 0;
                 
                 p) - -0.1, (PROC p = (INT a, REAL b) INT: 0;
                             
                             p) - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), (PROC p = (INT a, REAL b) INT: 0;
                
                p) - (LOC REF PROC PROC (REAL, INT) VOID := var), (PROC p = (INT a, REAL b) INT: 0;
                                                                   
                                                                   p) - BEGIN [, , ] [] BOOL tb = 4r1230321;
      
      tb
       END, (PROC p = (INT a, REAL b) INT: 0;
             
             p) - IF [1, 1, 1] BITS tb;
                     
                     b
       THEN tb
       ELSE 8r0
       FI, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - 0000, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - vm, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - (PROC p = (INT a, REAL b) INT: 0;
                                                          
                                                          p), STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - (STRUCT (INT x, y):
       (1, 2)), STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - -0.1, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - (LOC REF PROC PROC (REAL, INT) VOID := var), STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - BEGIN [, , ] [] BOOL tb = 4r1230321;
      
      tb
       END, STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP) - IF [1, 1, 1] BITS tb;
   
   b
       THEN tb
       ELSE 8r0
       FI, (STRUCT (INT x, y):
       (1, 2)) - 0000, (STRUCT (INT x, y):
       (1, 2)) - vm, (STRUCT (INT x, y):
       (1, 2)) - (PROC p = (INT a, REAL b) INT: 0;
                  
                  p), (STRUCT (INT x, y):
       (1, 2)) - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), (STRUCT (INT x, y):
       (1, 2)) - (STRUCT (INT x, y):
       (1, 2)), (STRUCT (INT x, y):
       (1, 2)) - -0.1, (STRUCT (INT x, y):
       (1, 2)) - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), (STRUCT (INT x, y):
       (1, 2)) - (LOC REF PROC PROC (REAL, INT) VOID := var), (STRUCT (INT x, y):
       (1, 2)) - BEGIN [, , ] [] BOOL tb = 4r1230321;
                       
                       tb
       END, (STRUCT (INT x, y):
       (1, 2)) - IF [1, 1, 1] BITS tb;
                    
                    b
       THEN tb
       ELSE 8r0
       FI, -0.1 - 0000, -0.1 - vm, -0.1 - (PROC p = (INT a, REAL b) INT: 0;
                                           
                                           p), -0.1 - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), -0.1 - (STRUCT (INT x, y):
       (1, 2)), -0.1 - -0.1, -0.1 - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), -0.1 - (LOC REF PROC PROC (REAL, INT) VOID := var), -0.1 - BEGIN [, , ] [] BOOL tb = 4r1230321;
          
          tb
       END, -0.1 - IF [1, 1, 1] BITS tb;
                      
                      b
       THEN tb
       ELSE 8r0
       FI, LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - 0000, LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - vm, LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - (PROC p = (INT a, REAL b) INT: 0;
                                        
                                        p), LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - (STRUCT (INT x, y):
       (1, 2)), LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - -0.1, LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - (LOC REF PROC PROC (REAL, INT) VOID := var), LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - BEGIN [, , ] [] BOOL tb = 4r1230321;
                                                      
                                                      tb
       END, LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)) - IF [1, 1, 1] BITS tb;
                                                                     
                                                                     b
       THEN tb
       ELSE 8r0
       FI, (LOC REF PROC PROC (REAL, INT) VOID := var) - 0000, (LOC REF PROC PROC (REAL, INT) VOID := var) - vm, (LOC REF PROC PROC (REAL, INT) VOID := var) - (PROC p = (INT a, REAL b) INT: 0;
                
                p), (LOC REF PROC PROC (REAL, INT) VOID := var) - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), (LOC REF PROC PROC (REAL, INT) VOID := var) - (STRUCT (INT x, y):
       (1, 2)), (LOC REF PROC PROC (REAL, INT) VOID := var) - -0.1, (LOC REF PROC PROC (REAL, INT) VOID := var) - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), (LOC REF PROC PROC (REAL, INT) VOID := var) - (LOC REF PROC PROC (REAL, INT) VOID := var), (LOC REF PROC PROC (REAL, INT) VOID := var) - BEGIN [, , ] [] BOOL tb = 4r1230321;
                      
                      tb
       END, (LOC REF PROC PROC (REAL, INT) VOID := var) - IF [1, 1, 1] BITS tb;
                                                             
                                                             b
       THEN tb
       ELSE 8r0
       FI, BEGIN [, , ] [] BOOL tb = 4r1230321;
                 
                 tb
       END - 0000, BEGIN [, , ] [] BOOL tb = 4r1230321;
                         
                         tb
       END - vm, BEGIN [, , ] [] BOOL tb = 4r1230321;
                       
                       tb
       END - (PROC p = (INT a, REAL b) INT: 0;
              
              p), BEGIN [, , ] [] BOOL tb = 4r1230321;
                        
                        tb
       END - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), BEGIN [, , ] [] BOOL tb = 4r1230321;
      
      tb
       END - (STRUCT (INT x, y):
       (1, 2)), BEGIN [, , ] [] BOOL tb = 4r1230321;
                      
                      tb
       END - -0.1, BEGIN [, , ] [] BOOL tb = 4r1230321;
                         
                         tb
       END - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), BEGIN [, , ] [] BOOL tb = 4r1230321;

tb
       END - (LOC REF PROC PROC (REAL, INT) VOID := var), BEGIN [, , ] [] BOOL tb = 4r1230321;
                                                                
                                                                tb
       END - BEGIN [, , ] [] BOOL tb = 4r1230321;
                   
                   tb
       END, BEGIN [, , ] [] BOOL tb = 4r1230321;
                  
                  tb
       END - IF [1, 1, 1] BITS tb;
                
                b
       THEN tb
       ELSE 8r0
       FI, IF [1, 1, 1] BITS tb;
              
              b
       THEN tb
       ELSE 8r0
       FI - 0000, IF [1, 1, 1] BITS tb;
                     
                     b
       THEN tb
       ELSE 8r0
       FI - vm, IF [1, 1, 1] BITS tb;
                   
                   b
       THEN tb
       ELSE 8r0
       FI - (PROC p = (INT a, REAL b) INT: 0;
             
             p), IF [1, 1, 1] BITS tb;
                    
                    b
       THEN tb
       ELSE 8r0
       FI - STRUCT (CHAR e1, REF STRUCT (CHAR e1, REF M e) e2) (SKIP), IF [1, 1, 1] BITS tb;
  
  b
       THEN tb
       ELSE 8r0
       FI - (STRUCT (INT x, y):
       (1, 2)), IF [1, 1, 1] BITS tb;
                   
                   b
       THEN tb
       ELSE 8r0
       FI - -0.1, IF [1, 1, 1] BITS tb;
                     
                     b
       THEN tb
       ELSE 8r0
       FI - LOC UNION (STRUCT (INT x, y), STRUCT (INT x, y, z)), IF [1, 1, 1] BITS tb;
                                                                    
                                                                    b
       THEN tb
       ELSE 8r0
       FI - (LOC REF PROC PROC (REAL, INT) VOID := var), IF [1, 1, 1] BITS tb;
                                                            
                                                            b
       THEN tb
       ELSE 8r0
       FI - BEGIN [, , ] [] BOOL tb = 4r1230321;
                  
                  tb
       END, IF [1, 1, 1] BITS tb;
               
               b
       THEN tb
       ELSE 8r0
       FI - IF [1, 1, 1] BITS tb;
               
               b
       THEN tb
       ELSE 8r0
       FI, SKIP);
      FOR i TO vf 
      DO (tc[i] | print (("err.2", i)))
      OD;
      print ((ctr, " tests ", (ctr = vf | "ok" | "error")))
END ##

##

## 