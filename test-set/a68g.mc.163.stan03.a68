# This program is part of the
 
     Revised Mathematisch Centrum Algol 68 Test Set

  by Dick Grune [1979].

  This program is distributed with Algol 68 Genie with
  kind permission of Dick Grune.

  This test set is available from:

     http://www.dickgrune.com/CS/Algol68

  or from the Vrije Universiteit Amsterdam:

     ftp://ftp.cs.vu.nl/pub/dick/Algol68/ #

PR quiet PR

#stan03#
BEGIN # All format items #
      INT i = 2;
      
      UNION (INT, REAL) uir = 2;
      
      print (("10.3.4.1. Literals and insertions", newline));
      printf (($dl$, 1));
      printf (($ # comment # dl$, 1));
      printf (($ CO comment CO dl$, 1));
      printf (($
               COMMENT comment COMMENT
               
               dl$, 1));
      printf (($x2(d)l$, 1));
      printf (($xkdl$, 1));
      printf (($xxdl$, 1));
      printf (($xydl$, 1));
      printf (($xpdl$, 1));
      printf (($xqdl$, 1));
      printf (($x"one"dl$, 1));
      printf (($x2"one"dl$, 1));
      printf (($x"one"2"two"dl$, 1));
      printf (($x"one""two"dl$, 1));
      printf (($x"one"1"two"2x"three"dl$, 1));
      printf (($x"one"1"two"2y"three"dl$, 1));
      printf (($x"aa"n(i)ydl$, 1));
      printf (($x"aa"nBEGIN i ENDydl$, 1));
      printf (($x"aa"n(TRUE | i)ydl$, 1));
      printf (($x"aa"nIF TRUE
               THEN i
               FIydl$, 1));
      printf (($x"aa"n(i | i, i)ydl$, 1));
      printf (($x"aa"nCASE i
               IN i, i
               ESACydl$, 1));
      printf (($x"aa"n(uir | (INT): i)ydl$, 1));
      printf (($x"aa"nCASE uir
               IN (INT): i
               ESACydl$, 1));
      printf (($x"aa"n(HEAP INT := i)ydl$, 1));
      printf (($x"Do not show"n(INT: jmp n)y"Do not show"dl$, 1));
      jmp n:
      printf (($x"a"dl$, 1));
      print (newline);
      print (("10.3.4.2. Integral patterns", newline));
      printf (($xdl$, 1));
      printf (($xsdl$, 1));
      printf (($xzl$, 1));
      printf (($xszl$, 1));
      printf (($xzdzdl$, 1));
      printf (($xz2dzdl$, 1));
      printf (($xz2sdzdl$, 1));
      printf (($xz2sdsz"a"dl$, 1));
      printf (($xz+sdsz"a"dl$, 1));
      print (newline);
      print (("10.3.4.3. Real patterns", newline));
      printf (($xd.dl$, 1.0));
      printf (($xds.dl$, 1.0));
      printf (($xd"s"s.dl$, 1.0));
      printf (($xd.l$, 1.0));
      printf (($xd.de+dl$, 1.0));
      printf (($xd.dse+dl$, 1.0));
      printf (($xd.d"a"se+dl$, 1.0));
      printf (($xd.e+dl$, 1.0));
      printf (($xde+dl$, 1.0));
      print (newline);
      print (("10.3.4.4. Boolean patterns", newline));
      printf (($xbl$, TRUE));
      print (newline);
      print (("10.3.4.5. Complex patterns", newline));
      printf (($xd.did.dl$, COMPL (1, 1)));
      printf (($xd.dsid.dl$, COMPL (1, 1)));
      printf (($xd.d"a"sid.dl$, COMPL (1, 1)));
      print (newline);
      print (("10.3.4.6. String patterns", newline));
      printf (($xaal$, "xx"));
      printf (($xasal$, "xx"));
      printf (($x2al$, "xx"));
      printf (($xa"a"sal$, "xx"));
      print (newline);
      print (("10.3.4.7. Bits patterns", newline));
      printf (($x2rdl$, 2r1));
      printf (($x4rdl$, 2r1));
      printf (($x8rdl$, 2r1));
      printf (($x16rdl$, 2r1));
      printf (($x2rsdl$, 2r1));
      printf (($x"a"2rdl$, 2r1));
      print (newline);
      print (("10.3.4.8. Choice patterns", newline));
      printf (($xc("a",  CO c CO 2"a"1"p", "bcd")l$, 2));
      printf (($x"z"c("a",  CO c CO 2"a"1"p", "bcd")l$, 2));
      printf (($xb("a",  CO c CO 2"a"1"p")l$, FALSE));
      printf (($x"z"b("a",  CO c CO 2"a"1"p")l$, FALSE));
      print (newline);
      print (("10.3.4.9. Format patterns", newline));
      printf (($xf($dl$)$, 1));
      printf (($xfIF TRUE
               THEN $dl$
               FI$, 1));
      printf (($xfCASE 1
               IN $dl$, SKIP
               ESAC$, 1));
      printf (($xfCASE uir
               IN (INT): $dl$
               ESAC$, 1));
      print (newline);
      print (("10.3.4.10. General patterns", newline));
      printf (($xgl$, 1));
      printf (($x"z"gl$, 1));
      printf (($xg(2)l$, 1));
      printf (($xg(4, 1)l$, 1));
      printf (($xg(7, 1, 2)l$, 1));
      printf (($xgl$, 1.0));
      printf (($x"z"gl$, 1.0));
      printf (($xg(2)l$, 1.0));
      printf (($xg(4, 1)l$, 1.0));
      printf (($xg(7, 1, 2)l$, 1.0));
      printf (($xg(HEAP INT := 7, HEAP INT := 1, HEAP INT := 2)l$, 1));
      printf (($x"Show"g(INT: jmp g)"Do not show"l$, 1));
      jmp g:
      print (("End of show", newline));
      SKIP
END