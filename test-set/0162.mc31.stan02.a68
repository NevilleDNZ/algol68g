COMMENT

This program is part of the Algol 68 Genie test.

The test set contains programs from the 
   "Revised Mathematisch Centrum Algol 68 Test Set" [1979] 
and synthetic programs from the 
   "Rennes test set" [1975].
These test sets are available from:
   www.dickgrune.com/CS/Algol68
or from the Vrije Universiteit Amsterdam:
   ftp://ftp.cs.vu.nl/pub/dick/Algol68

Above two test sets were used in the 1980's to validate the ALGOL68RS compilers [Algol Bulletin 49.2]. 

The "Rennes test-set" programs are automatically generated from the Algol 68 grammar using a formalism from Bernard Houssais (Universite de Rennes).  Especially the "Rennes test set" has proven very effective in exposing problems in Algol 68 implementations.  All programs are converted to upper-stropping and reformatted for lay-out.

The "Revised Mathematisch Centrum test set" programs are not synthetic like those in the "Rennes test set", but are selected programmer-made applications that are distributed with Algol 68 Genie with kind permission of the author of this test set, Dick Grune.

Note that part of the programs in this test set will fail; most due to intentional (syntactic or runtime) errors and a few due to differences between Algol 68 Genie and revised Algol 68. 

COMMENT

PR regression PR

#stan02#
BEGIN # Standard I/O #
  INT i = 1, INT ii := 1, REAL r = 1.0, CHAR c = "a",
  STRING s = "a";
  # 10.3.1.2. Channels #
  CHANNEL ch = stand out channel;
  print(("10.3.1.2. Channels", newline));
  print((estab possible(ch), newline));
  print((estab possible(stand in channel), newline));
  print((estab possible(stand out channel), newline));
  print((estab possible(stand back channel), newline));
  print(newline);
  # 10.3.1.3. Files #
  FILE f := stand out;
  PROC p = (REF FILE f) BOOL : TRUE # event routine #;
  PROC q = (REF FILE f, REF CHAR c) BOOL : TRUE # ch err #;
  print(("10.3.1.3. Files", newline));
  print((get possible(f), newline));
  print((put possible(f), newline));
  print((bin possible(f), newline));
  print((compressible(f), newline));
  print((reset possible(f), newline));
  print((set possible(f), newline));
  print((reidf possible(f), newline));
  print((estab possible(chan(f)), newline));
  print(((make term(f, s); "make term"), newline));
  print(((on logical file end(f, p); "on logical file end"),
                                                        newline));
  print(((on physical file end(f,p); "on physical file end"),
                                                        newline));
  print(((on page end(f, p); "on page end"), newline));
  print(((on line end(f, p); "on line end"), newline));
  print(((on format end(f, p); "on format end"), newline));
  print(((on value error(f, p); "on value error"), newline));
  print(((on char error(f, q); "on char error"), newline));
  IF reidf possible(f)
  THEN print(((reidf(f, s); "reidf"), newline))
  ELSE print(("no reidf", newline)) FI;
  print(newline);
  # 10.3.1.4. Opening and closing files #
  print(("10.3.1.4. Opening and closing files", newline));
  print((establish(f, "a", ch, 1, 1, 1), newline));
  print((create(f, ch), newline));
  print((open(f, "b", ch), newline));
  print(newline);
  # 10.3.1.5. Position enquiries #
  print(("10.3.1.5. Position enquiries", newline));
  print((char number(f), newline));
  print((line number(f), newline));
  print((page number(f), newline));
  print(newline);
  # 10.3.1.6. Layout routines #
  print(("10.3.1.6. Layout routines", newline));
  print(((space(f); "space"), newline));
  print(((backspace(f); "backspace"), newline));
  print(((newline(f); "newline"), newline));
  print(((newpage(f); "newpage"), newline));
  IF set possible(f)
  THEN print(((set(f, 1, 1, 1); "set"), newline))
  ELSE print(("no set", newline)) FI;
  IF reset possible(f)
  THEN print(((reset(f); "reset"), newline))
  ELSE print(("no reset", newline)) FI;
  print(((set char number(f, 1); "set char number"), newline));
  print(newline);
  # 10.3.2.1. Conversion routines #
  print((whole(r, i), newline));
  print((whole(i, i), newline));
  print((fixed(r, i, i), newline));
  print((fixed(i, i, i), newline));
  print((float(r, i, i, i), newline));
  print((float(i, i, i, i), newline));
  print((char in string(c, ii, s), newline));
  print((int width, newline));
  print((real width, newline));
  print((exp width, newline));
  print(newline);
  # 10.5.1. The particular prelude #
  print(("10.5.1. The particular prelude", newline));
  print(((last random:= 1968; random), newline));
  print((get possible(stand in), newline));
  print((get possible(stand out), newline));
  print((get possible(stand back), newline));
  write(("write", newline));
  print(((read(LOC [1:0] CHAR); "read"), newline));
  stop
END
